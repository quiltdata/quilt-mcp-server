module,function_name,signature,description,is_async,full_module_path
buckets,bucket_object_fetch,"bucket_object_fetch(s3_uri: 'str', max_bytes: 'int' = 65536, base64_encode: 'bool' = True) -> 'dict[str, Any]'",Fetch binary or text data from an S3 object - S3 bucket exploration and object retrieval tasks,False,quilt_mcp.tools.buckets
buckets,bucket_object_info,"bucket_object_info(s3_uri: 'str') -> 'dict[str, Any]'",Get metadata information for a specific S3 object - S3 bucket exploration and object retrieval tasks,False,quilt_mcp.tools.buckets
buckets,bucket_object_link,"bucket_object_link(s3_uri: 'str', expiration: 'int' = 3600) -> 'dict[str, Any]'",Generate a presigned URL for downloading an S3 object - S3 bucket exploration and object retrieval tasks,False,quilt_mcp.tools.buckets
buckets,bucket_object_text,"bucket_object_text(s3_uri: 'str', max_bytes: 'int' = 65536, encoding: 'str' = 'utf-8') -> 'dict[str, Any]'",Read text content from an S3 object - S3 bucket exploration and object retrieval tasks,False,quilt_mcp.tools.buckets
buckets,bucket_objects_list,"bucket_objects_list(bucket: 'str' = 's3://quilt-ernest-staging', prefix: 'str' = '', max_keys: 'int' = 100, continuation_token: 'str' = '', include_signed_urls: 'bool' = True) -> 'dict[str, Any]'",List objects in an S3 bucket with optional prefix filtering - S3 bucket exploration and object retrieval tasks,False,quilt_mcp.tools.buckets
buckets,bucket_objects_put,"bucket_objects_put(bucket: 'str', items: 'list[dict[str, Any]]') -> 'dict[str, Any]'",Upload multiple objects to an S3 bucket - S3 bucket exploration and object retrieval tasks,False,quilt_mcp.tools.buckets
catalog,catalog_uri,"catalog_uri(registry: 'str', package_name: 'str | None' = None, path: 'str | None' = None, top_hash: 'str | None' = None, tag: 'str | None' = None, catalog_host: 'str | None' = None) -> 'dict[str, Any]'",Build Quilt+ URI - Quilt authentication and catalog navigation workflows,False,quilt_mcp.tools.catalog
catalog,catalog_url,"catalog_url(registry: 'str', package_name: 'str | None' = None, path: 'str | None' = None, catalog_host: 'str | None' = None) -> 'dict[str, Any]'",Generate Quilt catalog URL - Quilt authentication and catalog navigation workflows,False,quilt_mcp.tools.catalog
catalog,configure_catalog,"configure_catalog(catalog_url: 'str') -> 'dict[str, Any]'",Configure Quilt catalog URL - Quilt authentication and catalog navigation workflows,False,quilt_mcp.tools.catalog
catalog,switch_catalog,"switch_catalog(catalog_name: 'str') -> 'dict[str, Any]'",Switch Quilt catalog - Quilt authentication and catalog navigation workflows,False,quilt_mcp.tools.catalog
data_visualization,create_data_visualization,"create_data_visualization(data: 'dict[str, Iterable[Any]] | Sequence[Dict[str, Any]] | str', plot_type: 'str', x_column: 'str', y_column: 'Optional[str]' = None, group_column: 'Optional[str]' = None, title: 'str' = '', xlabel: 'str' = '', ylabel: 'str' = '', color_scheme: 'str' = 'genomics', template: 'str' = 'research', output_format: 'str' = 'echarts') -> 'Dict[str, Any]'",Create interactive data visualization for Quilt packages - Generate ECharts configurations from tabular data.,False,quilt_mcp.tools.data_visualization
packages,package_browse,"package_browse(package_name: 'str', registry: 'str' = 's3://quilt-ernest-staging', recursive: 'bool' = True, include_file_info: 'bool' = True, max_depth: 'int' = 0, top: 'int' = 0, include: 'list[str] | None' = None, exclude: 'list[str] | None' = None, include_signed_urls: 'bool' = True) -> 'dict[str, Any]'",Browse the contents of a Quilt package with enhanced file information - Quilt package discovery and comparison tasks,False,quilt_mcp.tools.packages
packages,package_create,"package_create(package_name: 'str', s3_uris: 'list[str]', registry: 'str' = 's3://quilt-ernest-staging', metadata: 'dict[str, Any] | None' = None, message: 'str' = 'Created via package_create tool', flatten: 'bool' = True, copy_mode: 'str' = 'all') -> 'dict[str, Any]'","Create a new Quilt package from S3 objects - Core package creation, update, and deletion workflows",False,quilt_mcp.tools.packages
packages,package_create_from_s3,"package_create_from_s3(source_bucket: 'str', package_name: 'str', source_prefix: 'str' = '', target_registry: 'str | None' = None, description: 'str' = '', include_patterns: 'list[str] | None' = None, exclude_patterns: 'list[str] | None' = None, auto_organize: 'bool' = True, generate_readme: 'bool' = True, confirm_structure: 'bool' = True, metadata_template: 'str' = 'standard', dry_run: 'bool' = False, metadata: 'dict[str, Any] | None' = None, copy_mode: 'str' = 'all', force: 'bool' = False) -> 'dict[str, Any]'",Create a well-organized Quilt package from S3 bucket contents with smart organization - Bulk S3-to-package ingestion workflows,False,quilt_mcp.tools.packages
packages,package_delete,"package_delete(package_name: 'str', registry: 'str' = 's3://quilt-ernest-staging') -> 'dict[str, Any]'","Delete a Quilt package from the registry - Core package creation, update, and deletion workflows",False,quilt_mcp.tools.packages
packages,package_diff,"package_diff(package1_name: 'str', package2_name: 'str', registry: 'str' = 's3://quilt-ernest-staging', package1_hash: 'str' = '', package2_hash: 'str' = '') -> 'dict[str, Any]'",Compare two package versions and show differences - Quilt package discovery and comparison tasks,False,quilt_mcp.tools.packages
packages,package_update,"package_update(package_name: 'str', s3_uris: 'list[str]', registry: 'str' = 's3://quilt-ernest-staging', metadata: 'dict[str, Any] | None' = None, message: 'str' = 'Added objects via package_update tool', flatten: 'bool' = True, copy_mode: 'str' = 'all') -> 'dict[str, Any]'","Update an existing Quilt package by adding new S3 objects - Core package creation, update, and deletion workflows",False,quilt_mcp.tools.packages
packages,unified_search,"unified_search(query: 'str', registry: 'str' = 's3://quilt-ernest-staging', limit: 'int' = 10, from_: 'int' = 0) -> 'dict[str, Any]'",Search for Quilt packages by content and metadata - Quilt package discovery and comparison tasks,False,quilt_mcp.tools.packages
quilt_mcp.services.athena_read_service,athena_query_execute,"athena_query_execute(query: 'str', database_name: 'Optional[str]' = None, workgroup_name: 'Optional[str]' = None, data_catalog_name: 'str' = 'AwsDataCatalog', max_results: 'int' = 1000, output_format: 'str' = 'json', use_quilt_auth: 'bool' = True, service: 'Optional[Any]' = None) -> 'Dict[str, Any]'",Execute SQL query against Athena using SQLAlchemy/PyAthena - Athena querying and Glue catalog inspection workflows,False,quilt_mcp.services.athena_read_service
quilt_mcp.services.athena_read_service,athena_query_validate,"athena_query_validate(query: 'str') -> 'Dict[str, Any]'",Validate SQL query syntax without executing it - Athena querying and Glue catalog inspection workflows,False,quilt_mcp.services.athena_read_service
quilt_mcp.services.governance_service,admin_sso_config_remove,"admin_sso_config_remove() -> Dict[str, Any]",Remove the SSO configuration - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
quilt_mcp.services.governance_service,admin_sso_config_set,"admin_sso_config_set(config: str) -> Dict[str, Any]",Set the SSO configuration - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
quilt_mcp.services.governance_service,admin_tabulator_open_query_set,"admin_tabulator_open_query_set(enabled: bool) -> Dict[str, Any]",Set the tabulator open query status - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
quilt_mcp.services.governance_service,admin_user_add_roles,"admin_user_add_roles(name: str, roles: List[str]) -> Dict[str, Any]",Add roles to a user - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
quilt_mcp.services.governance_service,admin_user_create,"admin_user_create(name: str, email: str, role: str, extra_roles: Optional[List[str]] = None) -> Dict[str, Any]",Create a new user in the registry - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
quilt_mcp.services.governance_service,admin_user_delete,"admin_user_delete(name: str) -> Dict[str, Any]",Delete a user from the registry - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
quilt_mcp.services.governance_service,admin_user_remove_roles,"admin_user_remove_roles(name: str, roles: List[str], fallback: Optional[str] = None) -> Dict[str, Any]",Remove roles from a user - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
quilt_mcp.services.governance_service,admin_user_reset_password,"admin_user_reset_password(name: str) -> Dict[str, Any]",Reset a user's password - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
quilt_mcp.services.governance_service,admin_user_set_active,"admin_user_set_active(name: str, active: bool) -> Dict[str, Any]",Set the active status for a user - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
quilt_mcp.services.governance_service,admin_user_set_admin,"admin_user_set_admin(name: str, admin: bool) -> Dict[str, Any]",Set the admin status for a user - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
quilt_mcp.services.governance_service,admin_user_set_email,"admin_user_set_email(name: str, email: str) -> Dict[str, Any]",Update a user's email address - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
quilt_mcp.services.governance_service,admin_user_set_role,"admin_user_set_role(name: str, role: str, extra_roles: Optional[List[str]] = None, append: bool = False) -> Dict[str, Any]",Set the primary and extra roles for a user - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
quilt_mcp.services.tabulator_service,list_tabulator_buckets,"list_tabulator_buckets() -> 'Dict[str, Any]'",List all buckets (databases) in the Tabulator catalog.,False,quilt_mcp.services.tabulator_service
quilt_mcp.services.tabulator_service,list_tabulator_tables,"list_tabulator_tables(bucket_name: 'str') -> 'Dict[str, Any]'",List tables for a specific tabulator bucket.,False,quilt_mcp.services.tabulator_service
quilt_mcp.services.tabulator_service,tabulator_bucket_query,"tabulator_bucket_query(bucket_name: 'str', query: 'str', workgroup_name: 'Optional[str]' = None, max_results: 'int' = 1000, output_format: 'str' = 'json', use_quilt_auth: 'bool' = True) -> 'Dict[str, Any]'",Execute a bucket-scoped tabulator query (legacy tool signature).,True,quilt_mcp.services.tabulator_service
quilt_mcp.services.tabulator_service,tabulator_open_query_status,"tabulator_open_query_status() -> 'Dict[str, Any]'",Return tabulator open query flag.,True,quilt_mcp.services.tabulator_service
quilt_mcp.services.tabulator_service,tabulator_open_query_toggle,"tabulator_open_query_toggle(enabled: 'bool') -> 'Dict[str, Any]'",Toggle tabulator open query flag.,True,quilt_mcp.services.tabulator_service
quilt_mcp.services.tabulator_service,tabulator_table_create,"tabulator_table_create(bucket_name: 'str', table_name: 'str', schema: 'List[Dict[str, str]]', package_pattern: 'str', logical_key_pattern: 'str', parser_format: 'str' = 'csv', parser_delimiter: 'Optional[str]' = None, parser_header: 'bool' = True, parser_skip_rows: 'int' = 0, description: 'Optional[str]' = None) -> 'Dict[str, Any]'",Create tabulator table (legacy tool signature).,True,quilt_mcp.services.tabulator_service
quilt_mcp.services.tabulator_service,tabulator_table_delete,"tabulator_table_delete(bucket_name: 'str', table_name: 'str') -> 'Dict[str, Any]'",Delete tabulator table (legacy tool signature).,True,quilt_mcp.services.tabulator_service
quilt_mcp.services.tabulator_service,tabulator_table_rename,"tabulator_table_rename(bucket_name: 'str', table_name: 'str', new_table_name: 'str') -> 'Dict[str, Any]'",Rename tabulator table (legacy tool signature).,True,quilt_mcp.services.tabulator_service
quilt_mcp.services.workflow_service,workflow_add_step,"workflow_add_step(workflow_id: str, step_id: str, description: str, step_type: str = 'manual', dependencies: Optional[List[str]] = None, metadata: Optional[Dict[str, Any]] = None) -> Dict[str, Any]",Add a step to an existing workflow - Workflow tracking and orchestration tasks,False,quilt_mcp.services.workflow_service
quilt_mcp.services.workflow_service,workflow_create,"workflow_create(workflow_id: str, name: str, description: str = '', metadata: Optional[Dict[str, Any]] = None) -> Dict[str, Any]",Create a new workflow for tracking multi-step operations - Workflow tracking and orchestration tasks,False,quilt_mcp.services.workflow_service
quilt_mcp.services.workflow_service,workflow_template_apply,"workflow_template_apply(template_name: str, workflow_id: str, params: Dict[str, Any]) -> Dict[str, Any]",Apply a pre-defined workflow template - Workflow tracking and orchestration tasks,False,quilt_mcp.services.workflow_service
quilt_mcp.services.workflow_service,workflow_update_step,"workflow_update_step(workflow_id: str, step_id: str, status: str, result: Optional[Dict[str, Any]] = None, error_message: Optional[str] = None) -> Dict[str, Any]",Update the status of a workflow step - Workflow tracking and orchestration tasks,False,quilt_mcp.services.workflow_service
quilt_summary,create_quilt_summary_files,"create_quilt_summary_files(package_name: str, package_metadata: Dict[str, Any], organized_structure: Dict[str, List[Dict[str, Any]]], readme_content: str, source_info: Dict[str, Any], metadata_template: str = 'standard') -> Dict[str, Any]",Create all Quilt summary files for a package - Quilt summary file generation tasks,False,quilt_mcp.tools.quilt_summary
quilt_summary,generate_package_visualizations,"generate_package_visualizations(package_name: str, organized_structure: Dict[str, List[Dict[str, Any]]], file_types: Dict[str, Any], metadata_template: str = 'standard', package_metadata: Optional[Dict[str, Any]] = None) -> Dict[str, Any]",Generate comprehensive visualizations for the package - Quilt summary file generation tasks,False,quilt_mcp.tools.quilt_summary
quilt_summary,generate_quilt_summarize_json,"generate_quilt_summarize_json(package_name: str, package_metadata: Dict[str, Any], organized_structure: Dict[str, List[Dict[str, Any]]], readme_content: str, source_info: Dict[str, Any], metadata_template: str = 'standard') -> Dict[str, Any]",Generate a comprehensive quilt_summarize.json file following Quilt standards - Quilt summary file generation tasks,False,quilt_mcp.tools.quilt_summary
search,search_explain,"search_explain(query: str, scope: str = 'global', target: str = '') -> Dict[str, Any]",Explain how a search query would be processed and executed - Catalog and package search experiences,False,quilt_mcp.tools.search
search,search_graphql,"search_graphql(query: str, variables: Optional[Dict] = None) -> Dict[str, Any]",Execute an arbitrary GraphQL query against the configured Quilt Catalog - Catalog and package search experiences,False,quilt_mcp.tools.search
search,search_objects_graphql,"search_objects_graphql(bucket: str, object_filter: Optional[Dict] = None, first: int = 100, after: str = '') -> Dict[str, Any]",Search for objects within a bucket via Quilt GraphQL - Catalog and package search experiences,False,quilt_mcp.tools.search
search,search_suggest,"search_suggest(partial_query: str, context: str = '', suggestion_types: Optional[List[str]] = None, limit: int = 10) -> Dict[str, Any]",Get intelligent search suggestions based on partial queries and context - Catalog and package search experiences,False,quilt_mcp.tools.search
search,unified_search,"unified_search(query: str, scope: str = 'global', target: str = '', backends: Optional[List[str]] = None, limit: int = 50, include_metadata: bool = True, include_content_preview: bool = False, explain_query: bool = False, filters: Optional[Dict[str, Any]] = None, count_only: bool = False) -> Dict[str, Any]","Intelligent unified search across Quilt catalogs, packages, and S3 buckets - Catalog and package search experiences",False,quilt_mcp.tools.search
