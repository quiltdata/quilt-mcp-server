module,function_name,signature,description,is_async,full_module_path
athena_glue,athena_databases_list,"athena_databases_list(catalog_name: 'str' = 'AwsDataCatalog', service: 'Optional[Any]' = None) -> 'Dict[str, Any]'",List available databases in AWS Glue Data Catalog.,False,quilt_mcp.tools.athena_glue
athena_glue,athena_query_execute,"athena_query_execute(query: 'str', database_name: 'Optional[str]' = None, workgroup_name: 'Optional[str]' = None, max_results: 'int' = 1000, output_format: 'str' = 'json', use_quilt_auth: 'bool' = True, service: 'Optional[Any]' = None) -> 'Dict[str, Any]'",Execute SQL query against Athena using SQLAlchemy/PyAthena.,False,quilt_mcp.tools.athena_glue
athena_glue,athena_query_history,"athena_query_history(max_results: 'int' = 50, status_filter: 'Optional[str]' = None, start_time: 'Optional[str]' = None, end_time: 'Optional[str]' = None, use_quilt_auth: 'bool' = True, service: 'Optional[Any]' = None) -> 'Dict[str, Any]'",Retrieve query execution history from Athena.,False,quilt_mcp.tools.athena_glue
athena_glue,athena_query_validate,"athena_query_validate(query: 'str') -> 'Dict[str, Any]'",Validate SQL query syntax without executing it.,False,quilt_mcp.tools.athena_glue
athena_glue,athena_table_schema,"athena_table_schema(database_name: 'str', table_name: 'str', catalog_name: 'str' = 'AwsDataCatalog', service: 'Optional[Any]' = None) -> 'Dict[str, Any]'",Get detailed schema information for a specific table.,False,quilt_mcp.tools.athena_glue
athena_glue,athena_workgroups_list,"athena_workgroups_list(use_quilt_auth: 'bool' = True, service: 'Optional[Any]' = None) -> 'Dict[str, Any]'",List available Athena workgroups that the user can access.,False,quilt_mcp.tools.athena_glue
auth,auth_status,"auth_status() -> 'dict[str, Any]'",Check Quilt authentication status with rich information and actionable suggestions.,False,quilt_mcp.tools.auth
auth,catalog_info,"catalog_info() -> 'dict[str, Any]'",Get information about the current Quilt catalog configuration.,False,quilt_mcp.tools.auth
auth,catalog_name,"catalog_name() -> 'dict[str, Any]'",Get the name of the current Quilt catalog.,False,quilt_mcp.tools.auth
auth,catalog_uri,"catalog_uri(registry: 'str', package_name: 'str | None' = None, path: 'str | None' = None, top_hash: 'str | None' = None, tag: 'str | None' = None, catalog_host: 'str | None' = None) -> 'dict[str, Any]'",Generate a Quilt+ URI for referencing packages or objects.,False,quilt_mcp.tools.auth
auth,catalog_url,"catalog_url(registry: 'str', package_name: 'str | None' = None, path: 'str | None' = None, catalog_host: 'str | None' = None) -> 'dict[str, Any]'",Generate a catalog URL for viewing packages or bucket objects.,False,quilt_mcp.tools.auth
auth,configure_catalog,"configure_catalog(catalog_url: 'str') -> 'dict[str, Any]'",Configure Quilt catalog URL.,False,quilt_mcp.tools.auth
auth,filesystem_status,"filesystem_status() -> 'dict[str, Any]'",Check filesystem permissions and environment capabilities.,False,quilt_mcp.tools.auth
auth,switch_catalog,"switch_catalog(catalog_name: 'str') -> 'dict[str, Any]'",Switch to a different Quilt catalog by name.,False,quilt_mcp.tools.auth
buckets,bucket_object_fetch,"bucket_object_fetch(s3_uri: 'str', max_bytes: 'int' = 65536, base64_encode: 'bool' = True) -> 'dict[str, Any]'",Fetch binary or text data from an S3 object.,False,quilt_mcp.tools.buckets
buckets,bucket_object_info,"bucket_object_info(s3_uri: 'str') -> 'dict[str, Any]'",Get metadata information for a specific S3 object.,False,quilt_mcp.tools.buckets
buckets,bucket_object_link,"bucket_object_link(s3_uri: 'str', expiration: 'int' = 3600) -> 'dict[str, Any]'",Generate a presigned URL for downloading an S3 object.,False,quilt_mcp.tools.buckets
buckets,bucket_object_text,"bucket_object_text(s3_uri: 'str', max_bytes: 'int' = 65536, encoding: 'str' = 'utf-8') -> 'dict[str, Any]'",Read text content from an S3 object.,False,quilt_mcp.tools.buckets
buckets,bucket_objects_list,"bucket_objects_list(bucket: 'str' = 's3://quilt-ernest-staging', prefix: 'str' = '', max_keys: 'int' = 100, continuation_token: 'str' = '', include_signed_urls: 'bool' = True) -> 'dict[str, Any]'",List objects in an S3 bucket with optional prefix filtering.,False,quilt_mcp.tools.buckets
buckets,bucket_objects_put,"bucket_objects_put(bucket: 'str', items: 'list[dict[str, Any]]') -> 'dict[str, Any]'",Upload multiple objects to an S3 bucket.,False,quilt_mcp.tools.buckets
buckets,bucket_objects_search,"bucket_objects_search(bucket: 'str', query: 'str | dict', limit: 'int' = 10) -> 'dict[str, Any]'",Search objects in a Quilt bucket using Elasticsearch query syntax.,False,quilt_mcp.tools.buckets
buckets,bucket_objects_search_graphql,"bucket_objects_search_graphql(bucket: 'str', object_filter: 'dict | None' = None, first: 'int' = 100, after: 'str' = '') -> 'dict[str, Any]'",Search bucket objects via Quilt Catalog GraphQL.,False,quilt_mcp.tools.buckets
governance,admin_roles_list,"admin_roles_list() -> Dict[str, Any]",List all available roles in the registry.,True,quilt_mcp.tools.governance
governance,admin_sso_config_get,"admin_sso_config_get() -> Dict[str, Any]",Get the current SSO configuration.,True,quilt_mcp.tools.governance
governance,admin_sso_config_remove,"admin_sso_config_remove() -> Dict[str, Any]",Remove the SSO configuration.,True,quilt_mcp.tools.governance
governance,admin_sso_config_set,"admin_sso_config_set(config: str) -> Dict[str, Any]",Set the SSO configuration.,True,quilt_mcp.tools.governance
governance,admin_tabulator_open_query_get,"admin_tabulator_open_query_get() -> Dict[str, Any]",Get the current tabulator open query status.,True,quilt_mcp.tools.governance
governance,admin_tabulator_open_query_set,"admin_tabulator_open_query_set(enabled: bool) -> Dict[str, Any]",Set the tabulator open query status.,True,quilt_mcp.tools.governance
governance,admin_user_add_roles,"admin_user_add_roles(name: str, roles: List[str]) -> Dict[str, Any]",Add roles to a user.,True,quilt_mcp.tools.governance
governance,admin_user_create,"admin_user_create(name: str, email: str, role: str, extra_roles: Optional[List[str]] = None) -> Dict[str, Any]",Create a new user in the registry.,True,quilt_mcp.tools.governance
governance,admin_user_delete,"admin_user_delete(name: str) -> Dict[str, Any]",Delete a user from the registry.,True,quilt_mcp.tools.governance
governance,admin_user_get,"admin_user_get(name: str) -> Dict[str, Any]",Get detailed information about a specific user.,True,quilt_mcp.tools.governance
governance,admin_user_remove_roles,"admin_user_remove_roles(name: str, roles: List[str], fallback: Optional[str] = None) -> Dict[str, Any]",Remove roles from a user.,True,quilt_mcp.tools.governance
governance,admin_user_reset_password,"admin_user_reset_password(name: str) -> Dict[str, Any]",Reset a user's password.,True,quilt_mcp.tools.governance
governance,admin_user_set_active,"admin_user_set_active(name: str, active: bool) -> Dict[str, Any]",Set the active status for a user.,True,quilt_mcp.tools.governance
governance,admin_user_set_admin,"admin_user_set_admin(name: str, admin: bool) -> Dict[str, Any]",Set the admin status for a user.,True,quilt_mcp.tools.governance
governance,admin_user_set_email,"admin_user_set_email(name: str, email: str) -> Dict[str, Any]",Update a user's email address.,True,quilt_mcp.tools.governance
governance,admin_user_set_role,"admin_user_set_role(name: str, role: str, extra_roles: Optional[List[str]] = None, append: bool = False) -> Dict[str, Any]",Set the primary and extra roles for a user.,True,quilt_mcp.tools.governance
governance,admin_users_list,"admin_users_list() -> Dict[str, Any]",List all users in the registry with detailed information.,True,quilt_mcp.tools.governance
metadata_examples,create_metadata_from_template,"create_metadata_from_template(template_name: str = 'standard', description: str = '', custom_fields: Dict[str, Any] = None) -> Dict[str, Any]",Create metadata using a template with custom fields - simplified interface.,False,quilt_mcp.tools.metadata_examples
metadata_examples,fix_metadata_validation_issues,"fix_metadata_validation_issues() -> Dict[str, Any]",Provide specific guidance for fixing metadata validation issues.,False,quilt_mcp.tools.metadata_examples
metadata_examples,show_metadata_examples,"show_metadata_examples() -> Dict[str, Any]",Show comprehensive metadata usage examples with working patterns.,False,quilt_mcp.tools.metadata_examples
metadata_templates,get_metadata_template,"get_metadata_template(template_name: str, custom_fields: Dict[str, Any] = None) -> Dict[str, Any]",Get a metadata template with optional custom fields.,False,quilt_mcp.tools.metadata_templates
metadata_templates,list_metadata_templates,"list_metadata_templates() -> Dict[str, Any]",List available metadata templates with descriptions.,False,quilt_mcp.tools.metadata_templates
metadata_templates,validate_metadata_structure,"validate_metadata_structure(metadata: Dict[str, Any], template_name: str = None) -> Dict[str, Any]",Validate metadata structure and provide suggestions.,False,quilt_mcp.tools.metadata_templates
package_management,create_package_enhanced,"create_package_enhanced(name: str, files: List[str], description: str = '', metadata_template: str = 'standard', metadata: Any = None, registry: Optional[str] = None, dry_run: bool = False, auto_organize: bool = True, copy_mode: str = 'all') -> Dict[str, Any]",Enhanced package creation with better error handling and metadata templates.,False,quilt_mcp.tools.package_management
package_management,list_package_tools,"list_package_tools() -> Dict[str, Any]",List all package management tools with usage guidance.,False,quilt_mcp.tools.package_management
package_management,package_update_metadata,"package_update_metadata(package_name: str, metadata: Any, registry: str = None, merge_with_existing: bool = True) -> Dict[str, Any]",Update or replace metadata for an existing package.,False,quilt_mcp.tools.package_management
package_management,package_validate,"package_validate(package_name: str, registry: str = None, check_integrity: bool = True, check_accessibility: bool = True) -> Dict[str, Any]",Validate package integrity and accessibility.,False,quilt_mcp.tools.package_management
package_ops,package_create,"package_create(package_name: 'str', s3_uris: 'list[str]', registry: 'str' = 's3://quilt-ernest-staging', metadata: 'dict[str, Any] | None' = None, message: 'str' = 'Created via package_create tool', flatten: 'bool' = True, copy_mode: 'str' = 'all') -> 'dict[str, Any]'",Create a new Quilt package from S3 objects.,False,quilt_mcp.tools.package_ops
package_ops,package_delete,"package_delete(package_name: 'str', registry: 'str' = 's3://quilt-ernest-staging') -> 'dict[str, Any]'",Delete a Quilt package from the registry.,False,quilt_mcp.tools.package_ops
package_ops,package_update,"package_update(package_name: 'str', s3_uris: 'list[str]', registry: 'str' = 's3://quilt-ernest-staging', metadata: 'dict[str, Any] | None' = None, message: 'str' = 'Added objects via package_update tool', flatten: 'bool' = True, copy_mode: 'str' = 'all') -> 'dict[str, Any]'",Update an existing Quilt package by adding new S3 objects.,False,quilt_mcp.tools.package_ops
packages,package_browse,"package_browse(package_name: 'str', registry: 'str' = 's3://quilt-ernest-staging', recursive: 'bool' = True, include_file_info: 'bool' = True, max_depth: 'int' = 0, top: 'int' = 0, include: 'list[str] | None' = None, exclude: 'list[str] | None' = None, include_signed_urls: 'bool' = True) -> 'dict[str, Any]'",Browse the contents of a Quilt package with enhanced file information.,False,quilt_mcp.tools.packages
packages,package_contents_search,"package_contents_search(package_name: 'str', query: 'str', registry: 'str' = 's3://quilt-ernest-staging', include_signed_urls: 'bool' = True) -> 'dict[str, Any]'",Search within a package's contents by filename or path.,False,quilt_mcp.tools.packages
packages,package_diff,"package_diff(package1_name: 'str', package2_name: 'str', registry: 'str' = 's3://quilt-ernest-staging', package1_hash: 'str' = '', package2_hash: 'str' = '') -> 'dict[str, Any]'",Compare two package versions and show differences.,False,quilt_mcp.tools.packages
packages,packages_search,"packages_search(query: 'str', registry: 'str' = 's3://quilt-ernest-staging', limit: 'int' = 10, from_: 'int' = 0) -> 'dict[str, Any]'",Search for Quilt packages by content and metadata.,False,quilt_mcp.tools.packages
permissions,aws_permissions_discover,"aws_permissions_discover(check_buckets: Optional[List[str]] = None, include_cross_account: bool = False, force_refresh: bool = False) -> Dict[str, Any]",Discover AWS permissions for current user/role.,False,quilt_mcp.tools.permissions
permissions,bucket_access_check,"bucket_access_check(bucket_name: str, operations: List[str] = None) -> Dict[str, Any]",Check specific access permissions for a bucket.,False,quilt_mcp.tools.permissions
permissions,bucket_recommendations_get,"bucket_recommendations_get(source_bucket: Optional[str] = None, operation_type: str = 'package_creation', user_context: Optional[Dict[str, Any]] = None) -> Dict[str, Any]",Get smart bucket recommendations based on permissions and context.,False,quilt_mcp.tools.permissions
quilt_summary,create_quilt_summary_files,"create_quilt_summary_files(package_name: str, package_metadata: Dict[str, Any], organized_structure: Dict[str, List[Dict[str, Any]]], readme_content: str, source_info: Dict[str, Any], metadata_template: str = 'standard') -> Dict[str, Any]",Create all Quilt summary files for a package.,False,quilt_mcp.tools.quilt_summary
quilt_summary,generate_package_visualizations,"generate_package_visualizations(package_name: str, organized_structure: Dict[str, List[Dict[str, Any]]], file_types: Dict[str, int], metadata_template: str = 'standard') -> Dict[str, Any]",Generate comprehensive visualizations for the package.,False,quilt_mcp.tools.quilt_summary
quilt_summary,generate_multi_format_visualizations,"generate_multi_format_visualizations(package_name: str, organized_structure: Dict[str, List[Dict[str, Any]]], file_types: Dict[str, Any], metadata_template: str = 'standard', viz_preferences: Optional[Dict[str, Any]] = None) -> Dict[str, Any]",Generate multi-format visualizations ready for the Quilt catalog.,False,quilt_mcp.tools.quilt_summary
quilt_summary,generate_quilt_summarize_json,"generate_quilt_summarize_json(package_name: str, package_metadata: Dict[str, Any], organized_structure: Dict[str, List[Dict[str, Any]]], readme_content: str, source_info: Dict[str, Any], metadata_template: str = 'standard') -> Dict[str, Any]",Generate a comprehensive quilt_summarize.json file following Quilt standards.,False,quilt_mcp.tools.quilt_summary
s3_package,package_create_from_s3,"package_create_from_s3(source_bucket: str, package_name: str, source_prefix: str = '', target_registry: Optional[str] = None, description: str = '', include_patterns: Optional[List[str]] = None, exclude_patterns: Optional[List[str]] = None, auto_organize: bool = True, generate_readme: bool = True, confirm_structure: bool = True, metadata_template: str = 'standard', dry_run: bool = False, metadata: dict[str, typing.Any] | None = None, copy_mode: str = 'all', force: bool = False) -> Dict[str, Any]",Create a well-organized Quilt package from S3 bucket contents with smart organization.,False,quilt_mcp.tools.s3_package
search,search_explain,"search_explain(query: str, scope: str = 'global', target: str = '') -> Dict[str, Any]",Explain how a search query would be processed and executed.,False,quilt_mcp.tools.search
search,search_suggest,"search_suggest(partial_query: str, context: str = '', suggestion_types: Optional[List[str]] = None, limit: int = 10) -> Dict[str, Any]",Get intelligent search suggestions based on partial queries and context.,False,quilt_mcp.tools.search
search,unified_search,"unified_search(query: str, scope: str = 'global', target: str = '', backends: Optional[List[str]] = None, limit: int = 50, include_metadata: bool = True, include_content_preview: bool = False, explain_query: bool = False, filters: Optional[Dict[str, Any]] = None, count_only: bool = False) -> Dict[str, Any]","Intelligent unified search across Quilt catalogs, packages, and S3 buckets.",False,quilt_mcp.tools.search
tabulator,tabulator_open_query_status,"tabulator_open_query_status() -> Dict[str, Any]",Get the current status of tabulator open query feature.,True,quilt_mcp.tools.tabulator
tabulator,tabulator_open_query_toggle,"tabulator_open_query_toggle(enabled: bool) -> Dict[str, Any]",Enable or disable tabulator open query feature.,True,quilt_mcp.tools.tabulator
tabulator,tabulator_table_create,"tabulator_table_create(bucket_name: str, table_name: str, config_yaml: str) -> Dict[str, Any]",Create or update a tabulator table using a YAML configuration.,True,quilt_mcp.tools.tabulator
tabulator,tabulator_table_delete,"tabulator_table_delete(bucket_name: str, table_name: str) -> Dict[str, Any]",Delete a tabulator table configuration.,True,quilt_mcp.tools.tabulator
tabulator,tabulator_table_rename,"tabulator_table_rename(bucket_name: str, table_name: str, new_table_name: str) -> Dict[str, Any]",Rename a tabulator table.,True,quilt_mcp.tools.tabulator
tabulator,tabulator_table_query,"tabulator_table_query(bucket_name: str, table_name: str, limit: Optional[int] = None, offset: int = 0, filters: Optional[Dict[str, Any]] = None, order_by: Optional[str] = None, selects: Optional[Sequence[str]] = None) -> Dict[str, Any]",Run a tabulator query and return formatted rows.,True,quilt_mcp.tools.tabulator
tabulator,tabulator_table_preview,"tabulator_table_preview(bucket_name: str, table_name: str, limit: int = 10, offset: int = 0, filters: Optional[Dict[str, Any]] = None, selects: Optional[Sequence[str]] = None) -> Dict[str, Any]",Preview the first rows of a tabulator table.,True,quilt_mcp.tools.tabulator
tabulator,tabulator_tables_list,"tabulator_tables_list(bucket_name: str) -> Dict[str, Any]",List all tabulator tables configured for a bucket.,True,quilt_mcp.tools.tabulator
unified_package,create_package,"create_package(name: str, files: List[str], description: str = '', auto_organize: bool = True, dry_run: bool = False, target_registry: Optional[str] = None, metadata: dict[str, typing.Any] | None = None, copy_mode: str = 'all') -> Dict[str, Any]",Unified package creation tool that handles everything automatically.,False,quilt_mcp.tools.unified_package
unified_package,list_available_resources,"list_available_resources() -> Dict[str, Any]",Auto-detect user's available buckets and registries.,False,quilt_mcp.tools.unified_package
unified_package,quick_start,"quick_start() -> Dict[str, Any]",Provide guided onboarding and setup assistance.,False,quilt_mcp.tools.unified_package
workflow_orchestration,workflow_add_step,"workflow_add_step(workflow_id: str, step_id: str, description: str, step_type: str = 'manual', dependencies: Optional[List[str]] = None, metadata: Optional[Dict[str, Any]] = None) -> Dict[str, Any]",Add a step to an existing workflow.,False,quilt_mcp.tools.workflow_orchestration
workflow_orchestration,workflow_create,"workflow_create(workflow_id: str, name: str, description: str = '', metadata: Optional[Dict[str, Any]] = None) -> Dict[str, Any]",Create a new workflow for tracking multi-step operations.,False,quilt_mcp.tools.workflow_orchestration
workflow_orchestration,workflow_get_status,"workflow_get_status(workflow_id: str) -> Dict[str, Any]",Get the current status of a workflow.,False,quilt_mcp.tools.workflow_orchestration
workflow_orchestration,workflow_list_all,"workflow_list_all() -> Dict[str, Any]",List all workflows with their current status.,False,quilt_mcp.tools.workflow_orchestration
workflow_orchestration,workflow_template_apply,"workflow_template_apply(template_name: str, workflow_id: str, params: Dict[str, Any]) -> Dict[str, Any]",Apply a pre-defined workflow template.,False,quilt_mcp.tools.workflow_orchestration
workflow_orchestration,workflow_update_step,"workflow_update_step(workflow_id: str, step_id: str, status: str, result: Optional[Dict[str, Any]] = None, error_message: Optional[str] = None) -> Dict[str, Any]",Update the status of a workflow step.,False,quilt_mcp.tools.workflow_orchestration
