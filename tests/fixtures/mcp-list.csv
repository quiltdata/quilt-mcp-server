type,module,function_name,signature,description,is_async,full_module_path
tool,athena_read_service,athena_query_execute,"athena_query_execute(query: 'str', database_name: 'Optional[str]' = None, workgroup_name: 'Optional[str]' = None, data_catalog_name: 'str' = 'AwsDataCatalog', max_results: 'int' = 1000, output_format: 'str' = 'json', use_quilt_auth: 'bool' = True, service: 'Optional[Any]' = None) -> 'Dict[str, Any]'",Execute SQL query against Athena using SQLAlchemy/PyAthena - Athena querying and Glue catalog inspection workflows,False,quilt_mcp.services.athena_read_service
tool,athena_read_service,athena_query_validate,"athena_query_validate(query: 'str') -> 'Dict[str, Any]'",Validate SQL query syntax without executing it - Athena querying and Glue catalog inspection workflows,False,quilt_mcp.services.athena_read_service
tool,buckets,bucket_object_fetch,bucket_object_fetch(params: 'BucketObjectFetchParams') -> 'BucketObjectFetchResponse',Fetch binary or text data from an S3 object - S3 bucket exploration and object retrieval tasks,False,quilt_mcp.tools.buckets
tool,buckets,bucket_object_info,bucket_object_info(params: 'BucketObjectInfoParams') -> 'BucketObjectInfoResponse',Get metadata information for a specific S3 object - S3 bucket exploration and object retrieval tasks,False,quilt_mcp.tools.buckets
tool,buckets,bucket_object_link,bucket_object_link(params: 'BucketObjectLinkParams') -> 'PresignedUrlResponse | BucketObjectInfoError',Generate a presigned URL for downloading an S3 object - S3 bucket exploration and object retrieval tasks,False,quilt_mcp.tools.buckets
tool,buckets,bucket_object_text,bucket_object_text(params: 'BucketObjectTextParams') -> 'BucketObjectTextResponse',Read text content from an S3 object - S3 bucket exploration and object retrieval tasks,False,quilt_mcp.tools.buckets
tool,buckets,bucket_objects_list,bucket_objects_list(params: 'BucketObjectsListParams') -> 'BucketObjectsListResponse',List objects in an S3 bucket with optional prefix filtering - S3 bucket exploration and object retrieval tasks,False,quilt_mcp.tools.buckets
tool,buckets,bucket_objects_put,bucket_objects_put(params: 'BucketObjectsPutParams') -> 'BucketObjectsPutResponse',Upload multiple objects to an S3 bucket - S3 bucket exploration and object retrieval tasks,False,quilt_mcp.tools.buckets
tool,catalog,catalog_configure,catalog_configure(catalog_url: 'str') -> 'dict',Configure Quilt catalog URL - Quilt authentication and catalog navigation workflows,False,quilt_mcp.tools.catalog
tool,catalog,catalog_uri,catalog_uri(params: 'CatalogUriParams') -> 'CatalogUriSuccess | CatalogUriError',Build Quilt+ URI - Quilt authentication and catalog navigation workflows,False,quilt_mcp.tools.catalog
tool,catalog,catalog_url,catalog_url(params: 'CatalogUrlParams') -> 'CatalogUrlSuccess | CatalogUrlError',Generate Quilt catalog URL - Quilt authentication and catalog navigation workflows,False,quilt_mcp.tools.catalog
tool,data_visualization,create_data_visualization,create_data_visualization(params: 'DataVisualizationParams') -> 'DataVisualizationSuccess | DataVisualizationError',Create interactive data visualization for Quilt packages - Generate ECharts configurations from tabular data.,False,quilt_mcp.tools.data_visualization
tool,governance_service,admin_sso_config_remove,"admin_sso_config_remove() -> Dict[str, Any]",Remove the SSO configuration - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
tool,governance_service,admin_sso_config_set,"admin_sso_config_set(config: str) -> Dict[str, Any]",Set the SSO configuration - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
tool,governance_service,admin_tabulator_open_query_set,"admin_tabulator_open_query_set(enabled: bool) -> Dict[str, Any]",Set the tabulator open query status - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
tool,governance_service,admin_user_add_roles,"admin_user_add_roles(name: str, roles: List[str]) -> Dict[str, Any]",Add roles to a user - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
tool,governance_service,admin_user_create,"admin_user_create(name: str, email: str, role: str, extra_roles: Optional[List[str]] = None) -> Dict[str, Any]",Create a new user in the registry - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
tool,governance_service,admin_user_delete,"admin_user_delete(name: str) -> Dict[str, Any]",Delete a user from the registry - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
tool,governance_service,admin_user_remove_roles,"admin_user_remove_roles(name: str, roles: List[str], fallback: Optional[str] = None) -> Dict[str, Any]",Remove roles from a user - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
tool,governance_service,admin_user_reset_password,"admin_user_reset_password(name: str) -> Dict[str, Any]",Reset a user's password - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
tool,governance_service,admin_user_set_active,"admin_user_set_active(name: str, active: bool) -> Dict[str, Any]",Set the active status for a user - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
tool,governance_service,admin_user_set_admin,"admin_user_set_admin(name: str, admin: bool) -> Dict[str, Any]",Set the admin status for a user - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
tool,governance_service,admin_user_set_email,"admin_user_set_email(name: str, email: str) -> Dict[str, Any]",Update a user's email address - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
tool,governance_service,admin_user_set_role,"admin_user_set_role(name: str, role: str, extra_roles: Optional[List[str]] = None, append: bool = False) -> Dict[str, Any]",Set the primary and extra roles for a user - Quilt governance and administrative operations,True,quilt_mcp.services.governance_service
tool,packages,package_browse,package_browse(params: 'PackageBrowseParams') -> 'PackageBrowseSuccess | ErrorResponse',Browse the contents of a Quilt package with enhanced file information - Quilt package discovery and comparison tasks,False,quilt_mcp.tools.packages
tool,packages,package_create,package_create(params: 'PackageCreateParams') -> 'PackageCreateSuccess | PackageCreateError',"Create a new Quilt package from S3 objects - Core package creation, update, and deletion workflows",False,quilt_mcp.tools.packages
tool,packages,package_create_from_s3,package_create_from_s3(params: 'PackageCreateFromS3Params') -> 'PackageCreateFromS3Success | PackageCreateFromS3Error',Create a well-organized Quilt package from S3 bucket contents with smart organization - Bulk S3-to-package ingestion workflows,False,quilt_mcp.tools.packages
tool,packages,package_delete,package_delete(params: 'PackageDeleteParams') -> 'PackageDeleteSuccess | PackageDeleteError',"Delete a Quilt package from the registry - Core package creation, update, and deletion workflows",False,quilt_mcp.tools.packages
tool,packages,package_diff,package_diff(params: 'PackageDiffParams') -> 'PackageDiffSuccess | PackageDiffError',Compare two package versions and show differences - Quilt package discovery and comparison tasks,False,quilt_mcp.tools.packages
tool,packages,package_update,package_update(params: 'PackageUpdateParams') -> 'PackageUpdateSuccess | PackageUpdateError',"Update an existing Quilt package by adding new S3 objects - Core package creation, update, and deletion workflows",False,quilt_mcp.tools.packages
tool,quilt_summary,create_quilt_summary_files,"create_quilt_summary_files(package_name: str, package_metadata: Dict[str, Any], organized_structure: Dict[str, List[Dict[str, Any]]], readme_content: str, source_info: Dict[str, Any], metadata_template: str = 'standard') -> quilt_mcp.models.responses.QuiltSummaryFilesSuccess | quilt_mcp.models.responses.QuiltSummaryFilesError",Create all Quilt summary files for a package - Quilt summary file generation tasks,False,quilt_mcp.tools.quilt_summary
tool,quilt_summary,generate_package_visualizations,"generate_package_visualizations(package_name: str, organized_structure: Dict[str, List[Dict[str, Any]]], file_types: Dict[str, Any], metadata_template: str = 'standard', package_metadata: Optional[Dict[str, Any]] = None) -> quilt_mcp.models.responses.PackageVisualizationsSuccess | quilt_mcp.models.responses.PackageVisualizationsError",Generate comprehensive visualizations for the package - Quilt summary file generation tasks,False,quilt_mcp.tools.quilt_summary
tool,quilt_summary,generate_quilt_summarize_json,"generate_quilt_summarize_json(package_name: str, package_metadata: Dict[str, Any], organized_structure: Dict[str, List[Dict[str, Any]]], readme_content: str, source_info: Dict[str, Any], metadata_template: str = 'standard') -> quilt_mcp.models.responses.QuiltSummarizeJson | quilt_mcp.models.responses.QuiltSummarizeJsonError",Generate a comprehensive quilt_summarize.json file following Quilt standards - Quilt summary file generation tasks,False,quilt_mcp.tools.quilt_summary
tool,search,search_catalog,"search_catalog(query: str, scope: str = 'global', target: str = '', backends: Optional[List[str]] = None, limit: int = 50, include_metadata: bool = True, include_content_preview: bool = False, explain_query: bool = False, filters: Optional[Dict[str, Any]] = None, count_only: bool = False) -> Dict[str, Any]","Intelligent unified search across Quilt catalogs, packages, and S3 buckets - Catalog and package search experiences",False,quilt_mcp.tools.search
tool,search,search_explain,"search_explain(query: str, scope: str = 'global', target: str = '') -> quilt_mcp.models.responses.SearchExplainSuccess | quilt_mcp.models.responses.SearchExplainError",Explain how a search query would be processed and executed - Catalog and package search experiences,False,quilt_mcp.tools.search
tool,search,search_suggest,"search_suggest(partial_query: str, context: str = '', suggestion_types: Optional[List[str]] = None, limit: int = 10) -> Dict[str, Any]",Get intelligent search suggestions based on partial queries and context - Catalog and package search experiences,False,quilt_mcp.tools.search
tool,tabulator_service,tabulator_bucket_query,"tabulator_bucket_query(bucket_name: 'str', query: 'str', workgroup_name: 'Optional[str]' = None, max_results: 'int' = 1000, output_format: 'str' = 'json', use_quilt_auth: 'bool' = True) -> 'Dict[str, Any]'",Execute a bucket-scoped tabulator query (legacy tool signature).,True,quilt_mcp.services.tabulator_service
tool,tabulator_service,tabulator_open_query_status,"tabulator_open_query_status() -> 'Dict[str, Any]'",Return tabulator open query flag.,True,quilt_mcp.services.tabulator_service
tool,tabulator_service,tabulator_open_query_toggle,"tabulator_open_query_toggle(enabled: 'bool') -> 'Dict[str, Any]'",Toggle tabulator open query flag.,True,quilt_mcp.services.tabulator_service
tool,tabulator_service,tabulator_table_create,"tabulator_table_create(bucket_name: 'str', table_name: 'str', schema: 'List[Dict[str, str]]', package_pattern: 'str', logical_key_pattern: 'str', parser_format: 'str' = 'csv', parser_delimiter: 'Optional[str]' = None, parser_header: 'bool' = True, parser_skip_rows: 'int' = 0, description: 'Optional[str]' = None) -> 'Dict[str, Any]'",Create tabulator table (legacy tool signature).,True,quilt_mcp.services.tabulator_service
tool,tabulator_service,tabulator_table_delete,"tabulator_table_delete(bucket_name: 'str', table_name: 'str') -> 'Dict[str, Any]'",Delete tabulator table (legacy tool signature).,True,quilt_mcp.services.tabulator_service
tool,tabulator_service,tabulator_table_rename,"tabulator_table_rename(bucket_name: 'str', table_name: 'str', new_table_name: 'str') -> 'Dict[str, Any]'",Rename tabulator table (legacy tool signature).,True,quilt_mcp.services.tabulator_service
tool,workflow_service,workflow_add_step,"workflow_add_step(workflow_id: str, step_id: str, description: str, step_type: str = 'manual', dependencies: Optional[List[str]] = None, metadata: Optional[Dict[str, Any]] = None) -> quilt_mcp.models.responses.WorkflowAddStepSuccess | quilt_mcp.models.responses.ErrorResponse",Add a step to an existing workflow - Workflow tracking and orchestration tasks,False,quilt_mcp.services.workflow_service
tool,workflow_service,workflow_create,"workflow_create(workflow_id: str, name: str, description: str = '', metadata: Optional[Dict[str, Any]] = None) -> Dict[str, Any]",Create a new workflow for tracking multi-step operations - Workflow tracking and orchestration tasks,False,quilt_mcp.services.workflow_service
tool,workflow_service,workflow_template_apply,"workflow_template_apply(template_name: str, workflow_id: str, params: Dict[str, Any]) -> quilt_mcp.models.responses.WorkflowTemplateApplySuccess | quilt_mcp.models.responses.ErrorResponse",Apply a pre-defined workflow template - Workflow tracking and orchestration tasks,False,quilt_mcp.services.workflow_service
tool,workflow_service,workflow_update_step,"workflow_update_step(workflow_id: str, step_id: str, status: str, result: Optional[Dict[str, Any]] = None, error_message: Optional[str] = None) -> Dict[str, Any]",Update the status of a workflow step - Workflow tracking and orchestration tasks,False,quilt_mcp.services.workflow_service
resource,admin,admin://config,AdminConfigResource(uri='admin://config'),Combined admin configuration resource.,True,quilt_mcp.resources.admin
resource,admin,admin://config,AdminConfigResource(uri='admin://config'),Combined admin configuration resource.,True,quilt_mcp.resources.admin
resource,admin,admin://config/sso,AdminSSOConfigResource(uri='admin://config/sso'),SSO configuration.,True,quilt_mcp.resources.admin
resource,admin,admin://config/sso,AdminSSOConfigResource(uri='admin://config/sso'),SSO configuration.,True,quilt_mcp.resources.admin
resource,admin,admin://config/tabulator,AdminTabulatorConfigResource(uri='admin://config/tabulator'),Tabulator open query configuration.,True,quilt_mcp.resources.admin
resource,admin,admin://config/tabulator,AdminTabulatorConfigResource(uri='admin://config/tabulator'),Tabulator open query configuration.,True,quilt_mcp.resources.admin
resource,admin,admin://roles,AdminRolesResource(uri='admin://roles'),List all available roles.,True,quilt_mcp.resources.admin
resource,admin,admin://roles,AdminRolesResource(uri='admin://roles'),List all available roles.,True,quilt_mcp.resources.admin
resource,admin,admin://users,AdminUsersResource(uri='admin://users'),List all users in the registry.,True,quilt_mcp.resources.admin
resource,admin,admin://users,AdminUsersResource(uri='admin://users'),List all users in the registry.,True,quilt_mcp.resources.admin
resource,admin,admin://users/{name},AdminUserResource(uri='admin://users/{name}'),Get specific user details.,True,quilt_mcp.resources.admin
resource,admin,admin://users/{name},AdminUserResource(uri='admin://users/{name}'),Get specific user details.,True,quilt_mcp.resources.admin
resource,athena,athena://databases,AthenaDatabasesResource(uri='athena://databases'),List available Athena databases.,True,quilt_mcp.resources.athena
resource,athena,athena://databases,AthenaDatabasesResource(uri='athena://databases'),List available Athena databases.,True,quilt_mcp.resources.athena
resource,athena,athena://databases/{database}/tables/{table}/schema,AthenaTableSchemaResource(uri='athena://databases/{database}/tables/{table}/schema'),Get table schema.,True,quilt_mcp.resources.athena
resource,athena,athena://databases/{database}/tables/{table}/schema,AthenaTableSchemaResource(uri='athena://databases/{database}/tables/{table}/schema'),Get table schema.,True,quilt_mcp.resources.athena
resource,athena,athena://queries/history,AthenaQueryHistoryResource(uri='athena://queries/history'),Athena query execution history.,True,quilt_mcp.resources.athena
resource,athena,athena://queries/history,AthenaQueryHistoryResource(uri='athena://queries/history'),Athena query execution history.,True,quilt_mcp.resources.athena
resource,athena,athena://workgroups,AthenaWorkgroupsResource(uri='athena://workgroups'),List available Athena workgroups.,True,quilt_mcp.resources.athena
resource,athena,athena://workgroups,AthenaWorkgroupsResource(uri='athena://workgroups'),List available Athena workgroups.,True,quilt_mcp.resources.athena
resource,auth,auth://catalog/info,CatalogInfoResource(uri='auth://catalog/info'),Catalog configuration details.,True,quilt_mcp.resources.auth
resource,auth,auth://catalog/info,CatalogInfoResource(uri='auth://catalog/info'),Catalog configuration details.,True,quilt_mcp.resources.auth
resource,auth,auth://catalog/name,CatalogNameResource(uri='auth://catalog/name'),Catalog name identifier.,True,quilt_mcp.resources.auth
resource,auth,auth://catalog/name,CatalogNameResource(uri='auth://catalog/name'),Catalog name identifier.,True,quilt_mcp.resources.auth
resource,auth,auth://filesystem/status,FilesystemStatusResource(uri='auth://filesystem/status'),Filesystem access status.,True,quilt_mcp.resources.auth
resource,auth,auth://filesystem/status,FilesystemStatusResource(uri='auth://filesystem/status'),Filesystem access status.,True,quilt_mcp.resources.auth
resource,auth,auth://status,AuthStatusResource(uri='auth://status'),Authentication status and configuration.,True,quilt_mcp.resources.auth
resource,auth,auth://status,AuthStatusResource(uri='auth://status'),Authentication status and configuration.,True,quilt_mcp.resources.auth
resource,metadata,metadata://examples,MetadataExamplesResource(uri='metadata://examples'),Show metadata usage examples.,True,quilt_mcp.resources.metadata
resource,metadata,metadata://examples,MetadataExamplesResource(uri='metadata://examples'),Show metadata usage examples.,True,quilt_mcp.resources.metadata
resource,metadata,metadata://templates,MetadataTemplatesResource(uri='metadata://templates'),List available metadata templates.,True,quilt_mcp.resources.metadata
resource,metadata,metadata://templates,MetadataTemplatesResource(uri='metadata://templates'),List available metadata templates.,True,quilt_mcp.resources.metadata
resource,metadata,metadata://templates/{name},MetadataTemplateResource(uri='metadata://templates/{name}'),Get a specific metadata template.,True,quilt_mcp.resources.metadata
resource,metadata,metadata://templates/{name},MetadataTemplateResource(uri='metadata://templates/{name}'),Get a specific metadata template.,True,quilt_mcp.resources.metadata
resource,metadata,metadata://troubleshooting,MetadataTroubleshootingResource(uri='metadata://troubleshooting'),Metadata validation troubleshooting guide.,True,quilt_mcp.resources.metadata
resource,metadata,metadata://troubleshooting,MetadataTroubleshootingResource(uri='metadata://troubleshooting'),Metadata validation troubleshooting guide.,True,quilt_mcp.resources.metadata
resource,permissions,permissions://buckets/{bucket}/access,BucketAccessResource(uri='permissions://buckets/{bucket}/access'),Bucket-specific access check.,True,quilt_mcp.resources.permissions
resource,permissions,permissions://buckets/{bucket}/access,BucketAccessResource(uri='permissions://buckets/{bucket}/access'),Bucket-specific access check.,True,quilt_mcp.resources.permissions
resource,permissions,permissions://discover,PermissionsDiscoverResource(uri='permissions://discover'),AWS permissions discovery.,True,quilt_mcp.resources.permissions
resource,permissions,permissions://discover,PermissionsDiscoverResource(uri='permissions://discover'),AWS permissions discovery.,True,quilt_mcp.resources.permissions
resource,permissions,permissions://recommendations,BucketRecommendationsResource(uri='permissions://recommendations'),Bucket recommendations based on permissions.,True,quilt_mcp.resources.permissions
resource,permissions,permissions://recommendations,BucketRecommendationsResource(uri='permissions://recommendations'),Bucket recommendations based on permissions.,True,quilt_mcp.resources.permissions
resource,tabulator,tabulator://buckets,TabulatorBucketsResource(uri='tabulator://buckets'),List all buckets in Tabulator catalog.,True,quilt_mcp.resources.tabulator
resource,tabulator,tabulator://buckets,TabulatorBucketsResource(uri='tabulator://buckets'),List all buckets in Tabulator catalog.,True,quilt_mcp.resources.tabulator
resource,tabulator,tabulator://buckets/{bucket}/tables,TabulatorTablesResource(uri='tabulator://buckets/{bucket}/tables'),List tables for a specific bucket.,True,quilt_mcp.resources.tabulator
resource,tabulator,tabulator://buckets/{bucket}/tables,TabulatorTablesResource(uri='tabulator://buckets/{bucket}/tables'),List tables for a specific bucket.,True,quilt_mcp.resources.tabulator
resource,workflow,workflow://workflows,WorkflowsResource(uri='workflow://workflows'),List all workflows.,True,quilt_mcp.resources.workflow
resource,workflow,workflow://workflows,WorkflowsResource(uri='workflow://workflows'),List all workflows.,True,quilt_mcp.resources.workflow
resource,workflow,workflow://workflows/{id},WorkflowStatusResource(uri='workflow://workflows/{id}'),Get specific workflow status.,True,quilt_mcp.resources.workflow
resource,workflow,workflow://workflows/{id},WorkflowStatusResource(uri='workflow://workflows/{id}'),Get specific workflow status.,True,quilt_mcp.resources.workflow
