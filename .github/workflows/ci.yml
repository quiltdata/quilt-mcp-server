name: CI

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: ['**']  # Run CI on PRs to any branch (for stacked PR workflows)
  merge_group:  # Run CI on merge queue
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup build environment
      uses: ./.github/actions/setup-build-env
      with:
        python-version: ${{ matrix.python-version }}
      
    - name: Run tests
      run: |
        if [ "${{ matrix.python-version }}" = "3.11" ]; then
          echo "Running all tests including slow tests for Python 3.11..."
          uv sync --group test
          mkdir -p build/test-results
          export PYTHONPATH="src" && QUILT_DISABLE_QUILT3_SESSION=1 uv run python -m pytest tests/ -v -m "not search" --timeout=30 --disable-warnings \
            --junitxml=build/test-results/results.xml --cov=quilt_mcp --cov-report=xml:src/coverage.xml
        else
          echo "Running CI tests (skipping slow tests) for Python ${{ matrix.python-version }}..."
          make test-ci
        fi
      env:
        # AWS credentials for tests that need them
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-1' }}
        
        # Quilt configuration
        QUILT_DEFAULT_BUCKET: ${{ secrets.QUILT_DEFAULT_BUCKET }}
        QUILT_CATALOG_URL: ${{ secrets.QUILT_CATALOG_URL }}
        QUILT_TEST_PACKAGE: ${{ secrets.QUILT_TEST_PACKAGE }}
        QUILT_TEST_ENTRY: ${{ secrets.QUILT_TEST_ENTRY }}
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-py${{ matrix.python-version }}
        path: |
          build/test-results/
          src/coverage.xml
        retention-days: 7

  build-and-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup build environment
      uses: ./.github/actions/setup-build-env
      with:
        python-version: '3.11'
        include-nodejs: 'true'

    - name: Extract version from tag
      id: version
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT
        echo "Tag Version: $TAG_VERSION"

    - name: Create release
      uses: ./.github/actions/create-release
      with:
        tag-version: ${{ steps.version.outputs.tag_version }}