name: CI

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      timeout-minutes: 2
      
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
      timeout-minutes: 3
        
    - name: Set up Python
      run: uv python install ${{ matrix.python-version }}
      timeout-minutes: 3
      
    - name: Set up Node.js (for DXT releases)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/setup-node@v4
      with:
        node-version: '18'
      timeout-minutes: 3
      
    - name: Install DXT CLI (for releases)
      if: startsWith(github.ref, 'refs/tags/v')
      run: npm install -g @anthropic-ai/dxt
      timeout-minutes: 3
      
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          ~/.npm
        key: ${{ runner.os }}-deps-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-deps-
      
    - name: Install dependencies
      run: uv sync --group test
      timeout-minutes: 5
      
    - name: Test README commands work
      run: make test-readme
      timeout-minutes: 2
      env:
        UVRUN: uv run

    - name: Run unit tests (PRs only)
      if: github.event_name == 'pull_request'
      run: make -C app test-unit-ci
      timeout-minutes: 15
      env:
        UVRUN: uv run

    - name: Run unit and AWS tests (main/tags)
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
      run: make -C app test-ci-with-aws
      timeout-minutes: 20
      env:
        UVRUN: uv run
        # AWS credentials for all tests
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-1' }}
        
        # Quilt configuration
        QUILT_DEFAULT_BUCKET: ${{ secrets.QUILT_DEFAULT_BUCKET }}
        QUILT_CATALOG_URL: ${{ secrets.QUILT_CATALOG_URL }}
        QUILT_TEST_PACKAGE: ${{ secrets.QUILT_TEST_PACKAGE }}
        QUILT_TEST_ENTRY: ${{ secrets.QUILT_TEST_ENTRY }}
        
        # Test configuration
        UNIT_TEST_MODE: "false"

    - name: Run integration tests
      if: |
        github.ref == 'refs/heads/main' ||
        startsWith(github.ref, 'refs/tags/v') ||
        contains(github.event.pull_request.labels.*.name, 'test:integration') ||
        github.event_name == 'workflow_dispatch'
      run: make -C app test-integration
      timeout-minutes: 25
      env:
        # AWS credentials for integration testing
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-1' }}
        
        # Quilt-specific settings
        QUILT_READ_POLICY_ARN: ${{ secrets.QUILT_READ_POLICY_ARN }}
        CDK_DEFAULT_ACCOUNT: ${{ secrets.CDK_DEFAULT_ACCOUNT }}
        CDK_DEFAULT_REGION: ${{ secrets.CDK_DEFAULT_REGION }}
        QUILT_DEFAULT_BUCKET: ${{ secrets.QUILT_DEFAULT_BUCKET }}
        QUILT_TEST_PACKAGE: ${{ secrets.QUILT_TEST_PACKAGE }}
        QUILT_TEST_ENTRY: ${{ secrets.QUILT_TEST_ENTRY }}
        QUILT_INTEGRATION_BUCKET: ${{ secrets.QUILT_INTEGRATION_BUCKET || secrets.QUILT_DEFAULT_BUCKET }}
        QUILT_CATALOG_URL: ${{ secrets.QUILT_CATALOG_URL }}

    - name: Build DXT package
      if: startsWith(github.ref, 'refs/tags/v')
      run: make dxt
      timeout-minutes: 15
      
    - name: Validate DXT package
      if: startsWith(github.ref, 'refs/tags/v')
      run: make validate-dxt
      timeout-minutes: 5

    - name: Extract version from tag
      if: startsWith(github.ref, 'refs/tags/v')
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    # Only create release on first matrix job to avoid duplicates
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/v') && matrix.python-version == '3.11'
      uses: softprops/action-gh-release@v2
      with:
        name: "Quilt MCP DXT v${{ steps.version.outputs.version }}"
        files: |
          tools/dxt/dist/quilt-mcp-${{ steps.version.outputs.version }}.dxt
          tools/dxt/assets/README.md
          tools/dxt/assets/check-prereqs.sh
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        generate_release_notes: true
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-py${{ matrix.python-version }}
        path: |
          app/test-results/
          app/coverage.xml
        retention-days: 7
        
    - name: Upload DXT artifacts (for releases)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-artifact@v4
      with:
        name: dxt-package-py${{ matrix.python-version }}
        path: tools/dxt/dist/*.dxt
        retention-days: 90