name: Nightly Build (Develop Branch)

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov pytest-asyncio
        
    - name: Run tests
      run: |
        python -m pytest app/tests/ --cov=app --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: develop
        name: develop-coverage
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/
        
  build:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install build wheel
        
    - name: Build package
      run: |
        python -m build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        
  build-dxt:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/develop'
    outputs:
      dxt-version: ${{ steps.dxt-version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install uv package manager
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        
    - name: Install DXT CLI
      run: |
        npm install -g @anthropic-ai/dxt
        
    - name: Build DXT package
      run: |
        cd build-dxt
        make build
        
    - name: Validate DXT package
      run: |
        cd build-dxt
        make validate
        
    - name: Create DXT release
      run: |
        cd build-dxt
        make release
        
    - name: Upload DXT artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dxt-artifacts
        path: build-dxt/dist/
        
    - name: Get DXT version
      id: dxt-version
      run: |
        cd build-dxt
        DXT_VERSION=$(grep '"version"' assets/manifest.json | sed 's/.*"version": "\([^"]*\)".*/\1/')
        echo "version=$DXT_VERSION" >> $GITHUB_OUTPUT
        echo "DXT version: $DXT_VERSION"
        
  create-staging-pr:
    runs-on: ubuntu-latest
    needs: [build, build-dxt]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create PR to staging
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        base: staging
        branch: develop-to-staging-${{ github.run_number }}
        title: "ðŸš€ Nightly Build: Develop â†’ Staging (Build #${{ github.run_number }})"
        body: |
          ## Nightly Build Integration
          
          This PR integrates the latest develop branch changes into staging for testing.
          
          **Build Number:** ${{ github.run_number }}
          **Source Branch:** develop
          **Target Branch:** staging
          **Triggered:** ${{ github.event_name }}
          
          ## Test Results
          - âœ… All tests passed
          - âœ… Build successful
          - âœ… DXT package built and validated
          
          ## DXT Package
          - **Version:** ${{ needs.build-dxt.outputs.dxt-version }}
          - **Status:** Built, validated, and ready for testing
          
          ## Changes Included
          - Latest feature integrations
          - Bug fixes
          - Performance improvements
          - Updated DXT package
          
          ## Next Steps
          - Review changes
          - Test DXT package in staging environment
          - Run staging tests
          - Approve and merge when ready
          
          **Note:** This is an automated PR from the nightly build process.
        labels: |
          automated
          nightly-build
          develop-to-staging
          dxt-release
        assignees: |
          QuiltSimon
        reviewers: |
          QuiltSimon