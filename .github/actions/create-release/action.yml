name: 'Create Release'
description: 'Build Python package, MCPB package, Docker image, and create GitHub release'
inputs:
  package-version:
    description: 'Version from git tag (e.g., 0.5.9-dev-20250904075318)'
    required: true
  pypi-repository-url:
    description: 'PyPI repository URL (empty for PyPI, https://test.pypi.org/legacy/ for TestPyPI)'
    required: false
    default: ''
  skip-existing:
    description: 'Skip existing packages during upload'
    required: false
    default: 'false'
  build-docker:
    description: 'Build and push Docker image (true/false)'
    required: false
    default: 'true'

outputs:
  release-url:
    description: 'URL of the created release'
    value: ${{ steps.create-release.outputs.url }}
  pypi-url:
    description: 'URL of the published PyPI package'
    value: ${{ steps.package-urls.outputs.pypi-url }}
  docker-image:
    description: 'Docker image URI if built'
    value: ${{ steps.docker-info.outputs.image-uri }}

runs:
  using: 'composite'
  steps:
    - name: Install build dependencies
      shell: bash
      run: uv sync --group dev

    - name: Build python distributions
      shell: bash
      run: make python-dist

    - name: Publish to PyPI/TestPyPI
      uses: pypa/gh-action-pypi-publish@ec4db0b4ddc65acdf4bff5fa45ac92d78b56bdf0
      with:
        repository-url: ${{ inputs.pypi-repository-url }}
        packages-dir: dist/
        skip-existing: ${{ inputs.skip-existing }}
        verbose: true

    - name: Determine package URLs
      id: package-urls
      shell: bash
      run: |
        VERSION="${{ inputs.package-version }}"
        if [ -z "${{ inputs.pypi-repository-url }}" ]; then
          # Production PyPI
          PYPI_URL="https://pypi.org/project/quilt-mcp-server/${VERSION}/"
          echo "pypi-url=${PYPI_URL}" >> $GITHUB_OUTPUT
          echo "📦 PyPI URL: ${PYPI_URL}"
        else
          # TestPyPI
          PYPI_URL="https://test.pypi.org/project/quilt-mcp-server/${VERSION}/"
          echo "pypi-url=${PYPI_URL}" >> $GITHUB_OUTPUT
          echo "🧪 TestPyPI URL: ${PYPI_URL}"
        fi

    - name: Build MCPB package
      shell: bash
      run: make mcpb

    - name: Validate MCPB package
      shell: bash
      run: make mcpb-validate

    - name: Create release bundle
      shell: bash
      run: make release-zip

    - name: Build and push Docker image
      if: ${{ inputs.build-docker == 'true' }}
      shell: bash
      env:
        VERSION: ${{ inputs.package-version }}
        ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
        AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
        AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
      run: |
        echo "🐳 Building and pushing Docker image with scripts/docker.py"
        uv run python scripts/docker.py push --version "$VERSION"

    - name: Capture Docker image info
      id: docker-info
      if: ${{ inputs.build-docker == 'true' }}
      shell: bash
      run: |
        # Determine registry
        if [ -n "${{ env.ECR_REGISTRY }}" ]; then
          REGISTRY="${{ env.ECR_REGISTRY }}"
        elif [ -n "${{ env.AWS_ACCOUNT_ID }}" ]; then
          REGION="${{ env.AWS_DEFAULT_REGION }}"
          REGISTRY="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${REGION:-us-east-1}.amazonaws.com"
        else
          REGISTRY="unknown"
        fi
        IMAGE_URI="${REGISTRY}/quilt-mcp-server:${{ inputs.package-version }}"
        echo "image-uri=${IMAGE_URI}" >> $GITHUB_OUTPUT
        echo "🐳 Docker Image: ${IMAGE_URI}"

    - name: Create GitHub Release
      id: create-release
      uses: softprops/action-gh-release@v2
      with:
        name: "Quilt MCP MCPB v${{ inputs.package-version }}"
        files: |
          dist/*.mcpb
          dist/*-release.zip
        draft: false
        prerelease: ${{ contains(inputs.package-version, '-') }}
        generate_release_notes: true

    - name: Upload MCPB artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mcpb-package
        path: dist/*.mcpb
        retention-days: 90

    - name: Post release status to PR
      if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && contains(github.ref, '-dev-')) }}
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ inputs.package-version }}';
          const releaseUrl = '${{ steps.create-release.outputs.url }}';
          const pypiUrl = '${{ steps.package-urls.outputs.pypi-url }}';
          const dockerImage = '${{ steps.docker-info.outputs.image-uri }}';
          const isProd = !version.includes('-dev-');

          let body = `## 🚀 Release Status for v${version}\n\n`;
          body += `### 📦 Package Locations\n\n`;
          body += `- **GitHub Release:** [${releaseUrl}](${releaseUrl})\n`;
          body += `- **PyPI Package:** [${pypiUrl}](${pypiUrl})\n`;

          if (dockerImage && dockerImage !== 'unknown/quilt-mcp-server:' + version) {
            body += `- **Docker Image:** \`${dockerImage}\`\n`;
            body += `\n### 🐳 Docker Pull Command\n`;
            body += `\`\`\`bash\n`;
            body += `docker pull ${dockerImage}\n`;
            body += `\`\`\`\n`;
          }

          body += `\n### 📥 Installation\n`;
          if (isProd) {
            body += `\`\`\`bash\n`;
            body += `# Install from PyPI\n`;
            body += `pip install quilt-mcp-server==${version}\n`;
            body += `# or\n`;
            body += `uv add quilt-mcp-server==${version}\n`;
            body += `\`\`\`\n`;
          } else {
            body += `\`\`\`bash\n`;
            body += `# Install from TestPyPI\n`;
            body += `pip install -i https://test.pypi.org/simple/ quilt-mcp-server==${version}\n`;
            body += `# or\n`;
            body += `uv add --index https://test.pypi.org/simple/ quilt-mcp-server==${version}\n`;
            body += `\`\`\`\n`;
          }

          // Find the PR number
          let prNumber;
          if (context.eventName === 'pull_request') {
            prNumber = context.payload.pull_request.number;
          } else {
            // For push events on dev tags, try to find associated PR
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`
            });
            if (prs.length > 0) {
              prNumber = prs[0].number;
            }
          }

          if (prNumber) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: body
            });
            console.log(`Posted release status to PR #${prNumber}`);
          } else {
            console.log('No PR found to comment on');
            console.log('Release Status:\n' + body);
          }