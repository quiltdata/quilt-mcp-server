name: 'Create Release'
description: 'Build Python package, MCPB package, Docker image, and create GitHub release'
inputs:
  package-version:
    description: 'Version from git tag (e.g., 0.5.9-dev-20250904075318)'
    required: true
  pypi-repository-url:
    description: 'PyPI repository URL (empty for PyPI, https://test.pypi.org/legacy/ for TestPyPI)'
    required: false
    default: ''
  skip-existing:
    description: 'Skip existing packages during upload'
    required: false
    default: 'false'
  build-docker:
    description: 'Build and push Docker image (true/false)'
    required: false
    default: 'false'

outputs:
  release-id:
    description: 'ID of the created release'
    value: ${{ steps.create-release.outputs.id }}
  release-url:
    description: 'URL of the created release'
    value: ${{ steps.create-release.outputs.url }}
  pypi-url:
    description: 'URL of the published PyPI package'
    value: ${{ steps.package-urls.outputs.pypi-url }}
  docker-image:
    description: 'Docker image URI if built'
    value: ${{ steps.docker-info.outputs.image-uri }}

runs:
  using: 'composite'
  steps:
    - name: Install build dependencies
      shell: bash
      run: uv sync --group dev

    - name: Build python distributions
      shell: bash
      run: make python-dist

    - name: Publish to PyPI/TestPyPI
      uses: pypa/gh-action-pypi-publish@ec4db0b4ddc65acdf4bff5fa45ac92d78b56bdf0
      with:
        repository-url: ${{ inputs.pypi-repository-url }}
        packages-dir: dist/
        skip-existing: ${{ inputs.skip-existing }}
        verbose: true

    - name: Determine package URLs
      id: package-urls
      shell: bash
      run: |
        VERSION="${{ inputs.package-version }}"
        if [ -z "${{ inputs.pypi-repository-url }}" ]; then
          # Production PyPI
          PYPI_URL="https://pypi.org/project/quilt-mcp-server/${VERSION}/"
          echo "pypi-url=${PYPI_URL}" >> $GITHUB_OUTPUT
          echo "📦 PyPI URL: ${PYPI_URL}"
        else
          # TestPyPI
          PYPI_URL="https://test.pypi.org/project/quilt-mcp-server/${VERSION}/"
          echo "pypi-url=${PYPI_URL}" >> $GITHUB_OUTPUT
          echo "🧪 TestPyPI URL: ${PYPI_URL}"
        fi

    - name: Create release bundle (builds and validates MCPB package)
      shell: bash
      run: make release-zip

    - name: Build and push Docker image
      id: docker-info
      if: ${{ inputs.build-docker == 'true' }}
      shell: bash
      env:
        VERSION: ${{ inputs.package-version }}
      run: |
        echo "🐳 Building and pushing Docker image via Makefile"
        # Capture the image URI output by docker-push
        DOCKER_OUTPUT=$(make docker-push 2>&1)
        echo "$DOCKER_OUTPUT"

        # Extract the image URI from the output
        IMAGE_URI=$(echo "$DOCKER_OUTPUT" | grep "^DOCKER_IMAGE_URI=" | cut -d'=' -f2)

        if [ -n "$IMAGE_URI" ]; then
          echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT
          echo "🐳 Docker Image pushed: $IMAGE_URI"
        else
          echo "⚠️ Warning: Could not determine Docker image URI"
          echo "image-uri=unknown" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Release
      id: create-release
      uses: softprops/action-gh-release@v2
      with:
        name: "Quilt MCP MCPB v${{ inputs.package-version }}"
        files: |
          dist/*.mcpb
          dist/*-release.zip
        draft: false
        prerelease: ${{ contains(inputs.package-version, '-') }}
        generate_release_notes: true

    - name: Upload MCPB artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mcpb-package
        path: dist/*.mcpb
        retention-days: 90

    - name: Post release status
      shell: bash
      run: |
        # Determine if this is a production release
        IS_PRODUCTION="true"
        if [[ "${{ inputs.package-version }}" == *"-dev-"* ]] || [[ "${{ inputs.package-version }}" == *"-dev" ]]; then
          IS_PRODUCTION="false"
        fi

        uv run python scripts/post_release_status.py \
          --version "${{ inputs.package-version }}" \
          --release-url "${{ steps.create-release.outputs.url }}" \
          --pypi-url "${{ steps.package-urls.outputs.pypi-url }}" \
          --docker-image "${{ steps.docker-info.outputs.image-uri }}" \
          --release-id "${{ steps.create-release.outputs.id }}" \
          --sha "${{ github.sha }}" \
          --repo "${{ github.repository }}" \
          --github-token "${{ github.token }}" \
          --is-production "${IS_PRODUCTION}" \
          --package-name "quilt-mcp-server"