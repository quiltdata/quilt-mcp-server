# Development workflow targets
# Migrated from app/Makefile for Phase 1 consolidation

# Load environment variables from .env if it exists
sinclude .env
export

# Development endpoint configuration
DEV_ENDPOINT ?= http://127.0.0.1:8001/mcp/

# Test results directory
RESULTS_DIR ?= build/test-results

.PHONY: test test-all test-unit test-integration test-e2e test-ci test-scripts lint coverage coverage-html run run-inspector kill dev-clean

# Directory targets
$(RESULTS_DIR):
	@mkdir -p $(RESULTS_DIR)

# Test Targets
test:
	@echo "Running unit tests (default)..."
	@$(MAKE) test-unit

test-all: mcpb-validate test-scripts test-readme | $(RESULTS_DIR)
	@echo "Running all tests..."
	@uv sync --group test
	@export PYTHONPATH="src" && uv run python -m pytest tests/ -v --cov=quilt_mcp --cov-report=xml:$(RESULTS_DIR)/coverage-all.xml --cov-report=term-missing


test-ci: | $(RESULTS_DIR)
	@echo "Running all tests..."
	@uv sync --group test
	@export PYTHONPATH="src" && uv run python -m pytest tests/ -v -m "not slow and not search"  --cov=quilt_mcp --cov-report=xml:$(RESULTS_DIR)/coverage-all.xml --cov-report=term-missing

test-unit: $(RESULTS_DIR)/coverage-unit.xml

$(RESULTS_DIR)/coverage-unit.xml: tests/unit/test_*.py | $(RESULTS_DIR)
	@echo "Running unit tests only (fast, mocked)..."
	@uv sync --group test
	@export PYTHONPATH="src" && uv run python -m pytest tests/unit/ -v --cov=quilt_mcp --cov-report=xml:$(RESULTS_DIR)/coverage-unit.xml --cov-report=term-missing

test-integration: $(RESULTS_DIR)/coverage-integration.xml

$(RESULTS_DIR)/coverage-integration.xml: tests/integration/test_*.py | $(RESULTS_DIR)
	@echo "Running integration tests (AWS/external services)..."
	@uv sync --group test
	@if [ -d "tests/integration" ] && [ "$$(find tests/integration -name "*.py" | wc -l)" -gt 0 ]; then \
		export PYTHONPATH="src" && uv run python -m pytest tests/integration/ -v -m "not search" --cov=quilt_mcp --cov-report=xml:$(RESULTS_DIR)/coverage-integration.xml --cov-report=term-missing; \
	else \
		echo "No integration tests found, creating empty coverage file..."; \
		echo '<?xml version="1.0" ?><coverage></coverage>' > $(RESULTS_DIR)/coverage-integration.xml; \
	fi

test-e2e: $(RESULTS_DIR)/coverage-e2e.xml

$(RESULTS_DIR)/coverage-e2e.xml: tests/e2e/test_*.py | $(RESULTS_DIR)
	@echo "Running end-to-end workflow tests..."
	@uv sync --group test
	@if [ -d "tests/e2e" ] && [ "$$(find tests/e2e -name "*.py" | wc -l)" -gt 0 ]; then \
		export PYTHONPATH="src" && uv run python -m pytest tests/e2e/ -v --cov=quilt_mcp --cov-report=xml:$(RESULTS_DIR)/coverage-e2e.xml --cov-report=term-missing; \
	else \
		echo "No e2e tests found, creating empty coverage file..."; \
		echo '<?xml version="1.0" ?><coverage></coverage>' > $(RESULTS_DIR)/coverage-e2e.xml; \
	fi

coverage: $(RESULTS_DIR)/coverage-analysis.csv | $(RESULTS_DIR)

$(RESULTS_DIR)/coverage-analysis.csv: $(RESULTS_DIR)/coverage-unit.xml $(RESULTS_DIR)/coverage-integration.xml $(RESULTS_DIR)/coverage-e2e.xml scripts/coverage_analysis.py | $(RESULTS_DIR)
	@echo "Generating coverage analysis report..."
	@uv sync --group test
	@export PYTHONPATH="src" && uv run python scripts/coverage_analysis.py
	@echo "TBD: Checking coverage threshold..."

coverage-html:
	@echo "Running tests with HTML coverage report..."
	@uv sync --group test
	@export PYTHONPATH="src" && uv run python -m pytest tests/ --cov=quilt_mcp --cov-report=html:htmlcov --cov-report=term-missing -v
	@echo "âœ… HTML coverage report generated in htmlcov/"
	@echo "ðŸ“Š Open htmlcov/index.html in your browser to view the report"

test-scripts: scripts/tests/test_*.py | $(RESULTS_DIR)
	@echo "Running script tests (coverage analysis, workflow behavior)..."
	@uv sync --group test
	@if [ -d "scripts/tests" ] && [ "$$(find scripts/tests -name "*.py" | wc -l)" -gt 0 ]; then \
		export PYTHONPATH="src" && uv run python -m pytest scripts/tests/ -v; \
	else \
		echo "No script tests found"; \
	fi

# Code Quality Targets
lint:
	@echo "Running code linting and auto-fixing..."
	@uv sync --group lint
	@echo "Running ruff (format + lint + type check) - auto-fixing..."
	@uv run ruff format src/quilt_mcp/ tests/
	@uv run ruff check --fix src/quilt_mcp/ tests/
	@echo "âœ… All linting completed"

# Development Server Targets
run:
	@echo "Starting local MCP server..."
	@uv sync
	@echo "Server starting on $(DEV_ENDPOINT)"
	@export PYTHONPATH="src" && uv run python src/main.py

run-inspector:
	@echo "Launching MCP Inspector for visual testing..."
	@command -v npx >/dev/null || (echo "Error: npx not found. Please install Node.js first." && exit 1)
	@uv sync
	@echo "Starting MCP Inspector with server at $(DEV_ENDPOINT)"
	@echo "Inspector UI will be available at http://127.0.0.1:6274"
	@export PYTHONPATH="src" && npx @modelcontextprotocol/inspector uv run python src/main.py

kill:
	@echo "Killing running MCP server processes..."
	@pkill -f "python.*main.py" 2>/dev/null || echo "No main.py processes found"
	@pkill -f "python.*quilt_mcp" 2>/dev/null || echo "No quilt_mcp processes found"
	@pkill -f "@modelcontextprotocol/inspector" 2>/dev/null || echo "No MCP Inspector processes found"
	@lsof -ti :8000 | xargs -r kill 2>/dev/null || echo "No processes on port 8000"
	@lsof -ti :8001 | xargs -r kill 2>/dev/null || echo "No processes on port 8001"
	@echo "âœ… Server kill completed"

# Cleanup Targets
dev-clean:
	@echo "Cleaning Python cache..."
	@find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
	@find . -type f -name "*.pyc" -delete 2>/dev/null || true
	@echo "Cleaning test artifacts..."
	@rm -rf $(RESULTS_DIR)/ .coverage .coverage.* htmlcov/ .pytest_cache/ 2>/dev/null || true
	@find . -name "*.egg-info" -type d -exec rm -rf {} + 2>/dev/null || true
	@echo "Cleaning build artifacts..."
	@rm -rf build/ dist/ .ruff_cache/ 2>/dev/null || true
	@find . -name ".DS_Store" -delete 2>/dev/null || true
	@echo "âœ… Development cleanup completed"