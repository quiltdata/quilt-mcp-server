{
  "timestamp": 1756301375.7677922,
  "test_type": "Mock LLM-MCP Integration",
  "llm_client_info": {
    "tools_available": 60
  },
  "tool_availability": {
    "total_tools": 60,
    "key_tools_found": [
      "auth_status",
      "packages_search",
      "packages_list",
      "bucket_objects_search",
      "unified_search"
    ],
    "missing_tools": [],
    "all_tools": [
      "auth_status",
      "catalog_info",
      "catalog_name",
      "catalog_uri",
      "catalog_url",
      "configure_catalog",
      "filesystem_status",
      "switch_catalog",
      "bucket_object_fetch",
      "bucket_object_info",
      "bucket_object_link",
      "bucket_object_text",
      "bucket_objects_list",
      "bucket_objects_put",
      "bucket_objects_search",
      "package_browse",
      "package_contents_search",
      "package_diff",
      "packages_list",
      "packages_search"
    ]
  },
  "basic_functionality": {
    "basic_tests": [
      {
        "user_query": "What's my authentication status?",
        "tool_calls": [
          {
            "tool_call": "MockToolCall(name='auth_status', arguments={'random_string': 'llm_query'}, call_id='mock_call')",
            "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'random_string'\")"
          }
        ],
        "total_tools_called": 1
      },
      {
        "user_query": "Check system status",
        "tool_calls": [
          {
            "tool_call": "MockToolCall(name='auth_status', arguments={'random_string': 'llm_query'}, call_id='mock_call')",
            "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'random_string'\")"
          }
        ],
        "total_tools_called": 1
      },
      {
        "user_query": "Get catalog information",
        "tool_calls": [
          {
            "tool_call": "MockToolCall(name='catalog_info', arguments={'random_string': 'fallback'}, call_id='mock_call')",
            "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'random_string'\")"
          }
        ],
        "total_tools_called": 1
      }
    ]
  },
  "search_functionality": {
    "search_tests": [
      {
        "user_query": "Find CSV files in the catalog",
        "tool_calls": [
          {
            "tool_call": "MockToolCall(name='packages_search', arguments={'query': 'csv', 'limit': 5}, call_id='mock_call')",
            "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'query'\")"
          },
          {
            "tool_call": "MockToolCall(name='unified_search', arguments={'query': 'Find CSV files in the catalog', 'scope': 'catalog', 'limit': 3, 'explain_query': True}, call_id='mock_call')",
            "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'query'\")"
          }
        ],
        "total_tools_called": 2
      },
      {
        "user_query": "Search for data packages",
        "tool_calls": [
          {
            "tool_call": "MockToolCall(name='packages_search', arguments={'query': 'data', 'limit': 3}, call_id='mock_call')",
            "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'query'\")"
          },
          {
            "tool_call": "MockToolCall(name='unified_search', arguments={'query': 'Search for data packages', 'scope': 'catalog', 'limit': 3, 'explain_query': True}, call_id='mock_call')",
            "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'query'\")"
          },
          {
            "tool_call": "MockToolCall(name='packages_list', arguments={'limit': 5}, call_id='mock_call')",
            "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'limit'\")"
          }
        ],
        "total_tools_called": 3
      },
      {
        "user_query": "List available packages",
        "tool_calls": [
          {
            "tool_call": "MockToolCall(name='packages_list', arguments={'limit': 5}, call_id='mock_call')",
            "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'limit'\")"
          }
        ],
        "total_tools_called": 1
      },
      {
        "user_query": "Search bucket for data files",
        "tool_calls": [
          {
            "tool_call": "MockToolCall(name='packages_search', arguments={'query': 'data', 'limit': 3}, call_id='mock_call')",
            "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'query'\")"
          },
          {
            "tool_call": "MockToolCall(name='unified_search', arguments={'query': 'Search bucket for data files', 'scope': 'catalog', 'limit': 3, 'explain_query': True}, call_id='mock_call')",
            "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'query'\")"
          },
          {
            "tool_call": "MockToolCall(name='bucket_objects_search', arguments={'bucket': 's3://quilt-sandbox-bucket', 'query': 'data', 'limit': 3}, call_id='mock_call')",
            "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'bucket'\")"
          }
        ],
        "total_tools_called": 3
      }
    ]
  },
  "unified_search_architecture": {
    "unified_search_tests": [
      {
        "user_query": "Find genomics data using unified search",
        "tool_calls": [
          {
            "tool_call": "MockToolCall(name='packages_search', arguments={'query': 'data', 'limit': 3}, call_id='mock_call')",
            "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'query'\")"
          },
          {
            "tool_call": "MockToolCall(name='unified_search', arguments={'query': 'Find genomics data using unified search', 'scope': 'catalog', 'limit': 3, 'explain_query': True}, call_id='mock_call')",
            "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'query'\")"
          }
        ],
        "total_tools_called": 2
      },
      {
        "user_query": "Search for CSV files with advanced capabilities",
        "tool_calls": [
          {
            "tool_call": "MockToolCall(name='packages_search', arguments={'query': 'csv', 'limit': 5}, call_id='mock_call')",
            "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'query'\")"
          },
          {
            "tool_call": "MockToolCall(name='unified_search', arguments={'query': 'Search for CSV files with advanced capabilities', 'scope': 'catalog', 'limit': 3, 'explain_query': True}, call_id='mock_call')",
            "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'query'\")"
          }
        ],
        "total_tools_called": 2
      },
      {
        "user_query": "Use intelligent search to find research datasets",
        "tool_calls": [
          {
            "tool_call": "MockToolCall(name='packages_search', arguments={'query': 'data', 'limit': 3}, call_id='mock_call')",
            "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'query'\")"
          },
          {
            "tool_call": "MockToolCall(name='unified_search', arguments={'query': 'Use intelligent search to find research datasets', 'scope': 'catalog', 'limit': 3, 'explain_query': True}, call_id='mock_call')",
            "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'query'\")"
          }
        ],
        "total_tools_called": 2
      }
    ]
  },
  "error_handling": {
    "error_tests": [
      {
        "tool_call": "MockToolCall(name='packages_search', arguments={'query': '', 'limit': -1}, call_id='mock_call')",
        "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'query'\")"
      },
      {
        "tool_call": "MockToolCall(name='nonexistent_tool', arguments={'any': 'args'}, call_id='mock_call')",
        "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"Tool 'nonexistent_tool' not available to LLM\")"
      },
      {
        "tool_call": "MockToolCall(name='bucket_objects_search', arguments={'bucket': 'invalid-bucket'}, call_id='mock_call')",
        "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'bucket'\")"
      },
      {
        "tool_call": "MockToolCall(name='auth_status', arguments={}, call_id='mock_call')",
        "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() missing 1 required positional argument: 'arguments'\")"
      }
    ]
  },
  "performance": {
    "concurrent_test": {
      "total_conversations": 5,
      "successful_conversations": 0,
      "total_time_ms": 0.15,
      "total_tool_calls": 7,
      "average_tool_time_ms": 0.0,
      "results": [
        {
          "user_query": "Check auth status",
          "tool_calls": [
            {
              "tool_call": "MockToolCall(name='auth_status', arguments={'random_string': 'llm_query'}, call_id='mock_call')",
              "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'random_string'\")"
            }
          ],
          "total_tools_called": 1
        },
        {
          "user_query": "Search for data",
          "tool_calls": [
            {
              "tool_call": "MockToolCall(name='packages_search', arguments={'query': 'data', 'limit': 3}, call_id='mock_call')",
              "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'query'\")"
            },
            {
              "tool_call": "MockToolCall(name='unified_search', arguments={'query': 'Search for data', 'scope': 'catalog', 'limit': 3, 'explain_query': True}, call_id='mock_call')",
              "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'query'\")"
            }
          ],
          "total_tools_called": 2
        },
        {
          "user_query": "List packages",
          "tool_calls": [
            {
              "tool_call": "MockToolCall(name='packages_list', arguments={'limit': 5}, call_id='mock_call')",
              "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'limit'\")"
            }
          ],
          "total_tools_called": 1
        },
        {
          "user_query": "Get catalog info",
          "tool_calls": [
            {
              "tool_call": "MockToolCall(name='catalog_info', arguments={'random_string': 'fallback'}, call_id='mock_call')",
              "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'random_string'\")"
            }
          ],
          "total_tools_called": 1
        },
        {
          "user_query": "Find CSV files",
          "tool_calls": [
            {
              "tool_call": "MockToolCall(name='packages_search', arguments={'query': 'csv', 'limit': 5}, call_id='mock_call')",
              "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'query'\")"
            },
            {
              "tool_call": "MockToolCall(name='unified_search', arguments={'query': 'Find CSV files', 'scope': 'catalog', 'limit': 3, 'explain_query': True}, call_id='mock_call')",
              "result": "MockToolResult(success=False, content=None, execution_time_ms=0.0, error=\"FunctionTool.run() got an unexpected keyword argument 'query'\")"
            }
          ],
          "total_tools_called": 2
        }
      ]
    }
  }
}