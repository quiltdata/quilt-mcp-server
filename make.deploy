# Production/packaging targets
# Updated for Phase 4 clean release system transformation

# Paths
APP_DIR := src
ASSETS_DIR := src/deploy
BUILD_DIR := build
BUILD_PKGS_DIR := $(BUILD_DIR)/lib
DIST_DIR := dist

# Variables
DXT_NAME := quilt-mcp
# Allow VERSION to be overridden from command line, otherwise read from pyproject.toml
MANIFEST_VERSION := $(shell python3 scripts/version-utils.py get-version 2>/dev/null || echo "dev")
PACKAGE_VERSION := $(if $(VERSION),$(VERSION),$(MANIFEST_VERSION))
PACKAGE_ID := $(DIST_DIR)/$(DXT_NAME)-$(PACKAGE_VERSION)
DXT_PACKAGE := $(PACKAGE_ID).dxt
RELEASE_ZIP := $(PACKAGE_ID)-release.zip

# Marker files for incremental builds
ASSETS_MARKER := $(BUILD_DIR)/.assets-copied
APP_MARKER := $(BUILD_DIR)/.app-copied
DEPS_MARKER := $(BUILD_DIR)/.deps-installed

# Source file dependencies
ASSET_FILES := $(wildcard $(ASSETS_DIR)/*)
APP_FILES := $(shell find $(APP_DIR)/quilt_mcp -name "*.py" 2>/dev/null || true)

.PHONY: deploy-build dxt dxt-validate release-zip deploy-clean check-tools

# Check for required tools
check-tools:
	@command -v npx >/dev/null 2>&1 || { echo "‚ùå npx not found - install Node.js"; exit 1; }
	@command -v uv >/dev/null 2>&1 || { echo "‚ùå uv not found - install uv package manager"; exit 1; }
	@echo "‚úÖ All required tools found"

# Build Environment Preparation
deploy-build: check-tools
	@echo "Preparing production build environment..."
	@$(MAKE) -f make.deploy build-contents
	@$(MAKE) -f make.deploy build-test
	@echo "‚úÖ Build environment ready"

# Intermediate targets for incremental builds
$(ASSETS_MARKER): $(ASSET_FILES)
	@echo "Copying DXT assets..."
	@mkdir -p $(BUILD_DIR)
	@cp -r $(ASSETS_DIR)/* $(BUILD_DIR)/
	@if [ -f "$(BUILD_DIR)/check-dxt.sh" ]; then chmod +x $(BUILD_DIR)/check-dxt.sh; fi
	@if [ -f "$(BUILD_DIR)/check-prereqs.sh" ]; then chmod +x $(BUILD_DIR)/check-prereqs.sh; fi
	@echo "Generating manifest.json from template..."
	@sed 's/{{ version }}/$(PACKAGE_VERSION)/g' $(BUILD_DIR)/manifest.json.j2 > $(BUILD_DIR)/manifest.json
	@rm $(BUILD_DIR)/manifest.json.j2
	@touch $@

$(APP_MARKER): $(APP_FILES)
	@echo "Copying app source code..."
	@for file in $(APP_FILES); do \
		rel_path=$${file#src/}; \
		mkdir -p "$$(dirname "$(BUILD_DIR)/$$rel_path")"; \
		cp $$file $(BUILD_DIR)/$$rel_path; \
	done
	@touch $@

$(DEPS_MARKER): pyproject.toml
	@echo "Installing Python dependencies..."
	@mkdir -p $(BUILD_PKGS_DIR)
	@uv pip install --target $(BUILD_PKGS_DIR) --no-cache-dir --quiet --no-binary=pydantic-core .
	@touch $@

build-contents: $(ASSETS_MARKER) $(APP_MARKER)
	@echo "‚úÖ Build contents prepared"

build-test: build-contents
	@echo "Testing bootstrap script in build directory..."
	@echo "Verifying bootstrap.py can import dependencies..."
	@cd $(BUILD_DIR) && python -c "import bootstrap; print('Bootstrap module imported successfully')"
	@echo "‚úÖ Bootstrap test passed"

# DXT Package Creation
$(DXT_PACKAGE): build-contents
	@echo "Packing with official DXT CLI..."
	@mkdir -p $(DIST_DIR)
	@npx @anthropic-ai/dxt pack $(BUILD_DIR) $(DXT_PACKAGE)
	@echo "‚úÖ Built $(DXT_PACKAGE)"

dxt: $(DXT_PACKAGE)
	@echo "‚úÖ DXT package created: $(DXT_PACKAGE)"

# DXT Package Validation
dxt-validate: check-tools dxt
	@echo "Validating DXT package..."
	@echo "Validating with official DXT CLI..."
	@npx @anthropic-ai/dxt info $(DXT_PACKAGE)
	@echo "Validating generated manifest.json..."
	@npx @anthropic-ai/dxt validate $(BUILD_DIR)/manifest.json
	@echo "‚úÖ DXT package validation passed"

# Release Bundle Creation
$(RELEASE_ZIP): dxt-validate $(ASSETS_DIR)/README.md $(ASSETS_DIR)/check-dxt.sh
	@echo "Creating release bundle..."
	@mkdir -p $(DIST_DIR)/release
	@cp $(DXT_PACKAGE) $(DIST_DIR)/release/
	@cp $(ASSETS_DIR)/README.md $(DIST_DIR)/release/
	@cp $(ASSETS_DIR)/check-dxt.sh $(DIST_DIR)/release/
	@cd $(DIST_DIR)/release && zip -r ../$(DXT_NAME)-$(PACKAGE_VERSION)-release.zip .
	@rm -rf $(DIST_DIR)/release
	@echo "‚úÖ Built $(RELEASE_ZIP)"

release-zip: $(RELEASE_ZIP)
	@echo "‚úÖ Release bundle $(RELEASE_ZIP) ready for distribution"

# Release Tagging Targets
release-tag:
	@echo "Creating release tag..."
	@if [ "${DRY_RUN}" = "1" ]; then \
		echo "üîç DRY RUN: Would create release tag"; \
		./bin/release.sh release --dry-run; \
	else \
		./bin/release.sh release; \
	fi

release-dev-tag:
	@echo "Creating development tag..."
	@if [ "${DRY_RUN}" = "1" ]; then \
		echo "üîç DRY RUN: Would create development tag"; \
		./bin/release.sh dev --dry-run; \
	else \
		./bin/release.sh dev; \
	fi

# Cleanup Targets
deploy-clean:
	@echo "Cleaning build artifacts..."
	@rm -rf $(BUILD_DIR) $(DIST_DIR)
	@echo "‚úÖ Deploy cleanup completed"