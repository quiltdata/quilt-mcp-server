# Production/packaging targets
# MCPB packaging system

# Paths
APP_DIR := src
ASSETS_DIR := src/deploy
BUILD_DIR := build
BUILD_PKGS_DIR := $(BUILD_DIR)/lib
DIST_DIR := dist

# Docker platform configuration (for ECS deployment)
DOCKER_PLATFORM := linux/amd64

# Variables
PACKAGE_NAME := quilt-mcp
# Allow VERSION to be overridden from command line, otherwise read from pyproject.toml
MANIFEST_VERSION := $(shell python3 scripts/version.py get-version 2>/dev/null || echo "dev")
PACKAGE_VERSION := $(if $(VERSION),$(VERSION),$(MANIFEST_VERSION))
PACKAGE_ID := $(DIST_DIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
MCPB_PACKAGE := $(PACKAGE_ID).mcpb
RELEASE_ZIP := $(PACKAGE_ID)-release.zip


# Source file dependencies
ASSET_FILES := $(wildcard $(ASSETS_DIR)/*)
APP_FILES := $(shell find $(APP_DIR)/quilt_mcp -name "*.py" 2>/dev/null || true)

.PHONY: deploy-build mcpb mcpb-validate python-dist python-publish release-zip deploy-clean check-tools docker-build docker-push docker-push-dev docker-check docker-tools

# Check for required tools
check-tools:
	@command -v npx >/dev/null 2>&1 || { echo "❌ npx not found - install Node.js"; exit 1; }
	@command -v uv >/dev/null 2>&1 || { echo "❌ uv not found - install uv package manager"; exit 1; }
	@command -v mcpb >/dev/null 2>&1 || { echo "❌ mcpb not found - run: npm install -g @anthropic-ai/mcpb"; exit 1; }
	@echo "✅ All required tools found"

# Build Environment Preparation
deploy-build: check-tools
	@echo "Preparing production build environment..."
	@$(MAKE) -f make.deploy mcpb-build-contents
	@echo "✅ Build environment ready"


# Intermediate targets for incremental builds
# MCPB assets (only manifest, icon, README needed)
mcpb-assets: $(ASSET_FILES)
	@echo "Preparing MCPB assets..."
	@mkdir -p $(BUILD_DIR)/mcpb
	@echo "Generating manifest.json from template..."
	@sed 's/{{ version }}/$(PACKAGE_VERSION)/g' $(ASSETS_DIR)/manifest.json.j2 > $(BUILD_DIR)/mcpb/manifest.json
	@echo "Copying icon and documentation..."
	@cp $(ASSETS_DIR)/icon.png $(BUILD_DIR)/mcpb/
	@cp $(ASSETS_DIR)/README.md $(BUILD_DIR)/mcpb/
	@echo "✅ MCPB assets prepared"


# MCPB simplified build (no source code copying needed)
mcpb-build-contents: mcpb-assets
	@echo "✅ MCPB build contents prepared"



# MCPB Package Creation
$(MCPB_PACKAGE): mcpb-build-contents
	@echo "Packing with MCPB CLI..."
	@mkdir -p $(DIST_DIR)
	@mcpb pack $(BUILD_DIR)/mcpb $(MCPB_PACKAGE)
	@echo "✅ Built $(MCPB_PACKAGE)"

mcpb: $(MCPB_PACKAGE)
	@echo "✅ MCPB package created: $(MCPB_PACKAGE)"


# Python Package Distribution
python-dist: check-tools
	@echo "🚀 Building Python artifacts..."
	@mkdir -p $(DIST_DIR)
	@uv sync --group dev
	@uv run python -m build --wheel --sdist --outdir $(DIST_DIR)
	@echo "✅ Python packaging complete"

python-publish:
	@./scripts/release.sh python-publish

# MCPB Package Validation
mcpb-validate: check-tools mcpb
	@echo "🔍 Comprehensive MCPB package validation..."
	@echo "\n1. Validating with MCPB CLI..."
	@mcpb info $(MCPB_PACKAGE)
	@echo "\n2. Validating generated manifest.json..."
	@mcpb validate $(BUILD_DIR)/mcpb/manifest.json
	@echo "\n3. Validating package structure..."
	@test -f $(BUILD_DIR)/mcpb/manifest.json || { echo "❌ manifest.json missing"; exit 1; }
	@test -f $(BUILD_DIR)/mcpb/icon.png || { echo "❌ icon.png missing"; exit 1; }
	@test -f $(BUILD_DIR)/mcpb/README.md || { echo "❌ README.md missing"; exit 1; }
	@echo "✅ Package structure validation passed"
	@echo "\n4. Validating manifest content..."
	@grep -q '"name": "quilt-mcp"' $(BUILD_DIR)/mcpb/manifest.json || { echo "❌ Invalid name in manifest"; exit 1; }
	@grep -q '"version": "$(PACKAGE_VERSION)"' $(BUILD_DIR)/mcpb/manifest.json || { echo "❌ Invalid version in manifest"; exit 1; }
	@grep -q '"entry_point": "uvx"' $(BUILD_DIR)/mcpb/manifest.json || { echo "❌ Invalid entry_point in manifest"; exit 1; }
	@grep -q '"args": \["quilt-mcp"\]' $(BUILD_DIR)/mcpb/manifest.json || { echo "❌ Invalid args in manifest"; exit 1; }
	@echo "✅ Manifest content validation passed"
	@echo "\n5. Testing UVX execution compatibility..."
	@uvx --from . quilt-mcp --help >/dev/null 2>&1 || { echo "❌ UVX execution test failed"; exit 1; }
	@echo "✅ UVX execution test passed"
	@echo "\n6. Running prerequisites validation..."
	@bash $(ASSETS_DIR)/check-mcpb.sh >/dev/null 2>&1 || { echo "❌ Prerequisites validation failed"; exit 1; }
	@echo "✅ Prerequisites validation passed"
	@echo "\n✅ Comprehensive MCPB package validation passed"


# Release Bundle Creation
$(RELEASE_ZIP): mcpb-validate $(ASSETS_DIR)/README.md $(ASSETS_DIR)/check-mcpb.sh
	@echo "Creating release bundle..."
	@mkdir -p $(DIST_DIR)/release
	@cp $(MCPB_PACKAGE) $(DIST_DIR)/release/
	@cp $(ASSETS_DIR)/README.md $(DIST_DIR)/release/
	@cp $(ASSETS_DIR)/check-mcpb.sh $(DIST_DIR)/release/
	@cd $(DIST_DIR)/release && zip -r ../$(PACKAGE_NAME)-$(PACKAGE_VERSION)-release.zip .
	@rm -rf $(DIST_DIR)/release
	@echo "✅ Built $(RELEASE_ZIP)"

release-zip: $(RELEASE_ZIP)
	@echo "✅ Release bundle $(RELEASE_ZIP) ready for distribution"

# Docker Operations

docker-tools:
	@command -v docker >/dev/null 2>&1 || { echo "❌ Docker not found - install Docker"; exit 1; }
	@docker info >/dev/null 2>&1 || { echo "❌ Docker daemon not running or not accessible"; exit 1; }
	@echo "✅ Docker tools available"
	@echo "🔍 Checking ECR repository..."
	@aws ecr describe-repositories --repository-names quilt-mcp-server --region us-east-1 >/dev/null 2>&1 || \
		{ echo "📦 Creating ECR repository..." && aws ecr create-repository --repository-name quilt-mcp-server --region us-east-1 >/dev/null; }
	@echo "✅ ECR repository ready"
	@echo "🔐 Authenticating with ECR..."
	@aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 712023778557.dkr.ecr.us-east-1.amazonaws.com >/dev/null 2>&1
	@echo "✅ ECR authentication successful"

docker-build: docker-tools
	@echo "🐳 Building Docker image locally (default: local platform)..."
	@uv run python scripts/docker.py build
	@echo "✅ Docker build completed"

docker-push: docker-tools
	@echo "🐳 Building and pushing Docker image ($(DOCKER_PLATFORM))..."
	@VERSION=$(PACKAGE_VERSION) uv run python scripts/docker.py push --version $(PACKAGE_VERSION) --platform $(DOCKER_PLATFORM)
	@echo "✅ Docker push completed"

docker-push-dev: docker-tools
	@echo "🐳 Building and pushing development Docker image ($(DOCKER_PLATFORM))..."
	@DEV_VERSION="$(PACKAGE_VERSION)-dev-$(shell date +%Y%m%d%H%M%S)" && \
	echo "Using development version: $$DEV_VERSION" && \
	VERSION=$$DEV_VERSION uv run python scripts/docker.py push --version $$DEV_VERSION --no-latest --platform $(DOCKER_PLATFORM)
	@echo "✅ Development Docker push completed"

docker-check: docker-tools
	@echo "🔍 Verifying Docker image architecture in ECR..."
	@CHECK_VERSION=$${VERSION:-$(PACKAGE_VERSION)}; \
	echo "Checking image: 712023778557.dkr.ecr.us-east-1.amazonaws.com/quilt-mcp-server:$$CHECK_VERSION"; \
	echo ""; \
	echo "📦 Fetching manifest from ECR..."; \
	MANIFEST=$$(aws ecr batch-get-image \
		--repository-name quilt-mcp-server \
		--image-ids imageTag=$$CHECK_VERSION \
		--region us-east-1 \
		--query 'images[0].imageManifest' \
		--output text 2>/dev/null) && \
	if [ -z "$$MANIFEST" ]; then \
		echo "❌ Image not found in ECR: quilt-mcp-server:$$CHECK_VERSION"; \
		echo "   Run 'make docker-push' first to push the image"; \
		exit 1; \
	else \
		echo "✅ Image found in ECR"; \
		echo ""; \
		echo "🏗️ Analyzing image architecture..."; \
		ARCH=$$(echo "$$MANIFEST" | python3 scripts/check_image_arch.py) && \
		echo "   Architecture(s): $$ARCH"; \
		echo ""; \
		if echo "$$ARCH" | grep -q "amd64"; then \
			echo "✅ Image is built for linux/amd64 (x86_64) - compatible with ECS Fargate"; \
		else \
			echo "⚠️  WARNING: Image may not be compatible with ECS Fargate"; \
			echo "   ECS Fargate requires linux/amd64 architecture"; \
			echo "   Found: $$ARCH"; \
			echo "   Run 'make docker-push' to build and push with correct architecture"; \
		fi; \
	fi
	@echo ""
	@echo "📊 Image details:"
	@CHECK_VERSION=$${VERSION:-$(PACKAGE_VERSION)}; \
	aws ecr describe-images \
		--repository-name quilt-mcp-server \
		--image-ids imageTag=$$CHECK_VERSION \
		--region us-east-1 \
		--query 'imageDetails[0].{Size:imageSizeInBytes,Pushed:imagePushedAt,Digest:imageDigest}' \
		--output table 2>/dev/null || echo "   Could not fetch image details"

# Release Tagging Targets
release-tag:
	@echo "Creating release tag..."
	@if [ "${DRY_RUN}" = "1" ]; then \
		echo "🔍 DRY RUN: Would create release tag"; \
		./scripts/release.sh release --dry-run; \
	else \
		./scripts/release.sh release; \
	fi

release-dev-tag:
	@echo "Creating development tag..."
	@if [ "${DRY_RUN}" = "1" ]; then \
		echo "🔍 DRY RUN: Would create development tag"; \
		./scripts/release.sh dev --dry-run; \
	else \
		./scripts/release.sh dev; \
	fi

# Cleanup Targets
deploy-clean:
	@echo "Cleaning build artifacts..."
	@rm -rf $(BUILD_DIR) $(DIST_DIR)
	@rm -f *.mcpb  # Clean MCPB packages from root
	@echo "✅ Deploy cleanup completed"