# Production/packaging targets
# Migrated from tools/dxt/Makefile for Phase 1 consolidation

# Paths
APP_DIR := app
DXT_TOOLS_DIR := tools/dxt
ASSETS_DIR := $(DXT_TOOLS_DIR)/assets
BUILD_DIR := $(DXT_TOOLS_DIR)/build
BUILD_PKGS_DIR := $(BUILD_DIR)/lib
DIST_DIR := $(DXT_TOOLS_DIR)/dist

# Variables
DXT_NAME := quilt-mcp
# Allow VERSION to be overridden from command line, otherwise read from pyproject.toml
MANIFEST_VERSION := $(shell python3 scripts/version-utils.py get-version --pyproject pyproject.toml 2>/dev/null || echo "dev")
PACKAGE_VERSION := $(if $(VERSION),$(VERSION),$(MANIFEST_VERSION))
PACKAGE_ID := $(DIST_DIR)/$(DXT_NAME)-$(PACKAGE_VERSION)
PACKAGE_NAME := $(PACKAGE_ID).dxt
RELEASE_NAME := $(PACKAGE_ID)-release.zip

# Marker files for incremental builds
ASSETS_MARKER := $(BUILD_DIR)/.assets-copied
APP_MARKER := $(BUILD_DIR)/.app-copied
DEPS_MARKER := $(BUILD_DIR)/.deps-installed

# Source file dependencies
ASSET_FILES := $(wildcard $(ASSETS_DIR)/*)
APP_FILES := $(shell find $(APP_DIR)/quilt_mcp -name "*.py" 2>/dev/null || true)

.PHONY: build package dxt-package validate-package deploy-clean check-tools tag tag-dev

# Check for required tools
check-tools:
	@command -v npx >/dev/null 2>&1 || { echo "❌ npx not found - install Node.js"; exit 1; }
	@command -v uv >/dev/null 2>&1 || { echo "❌ uv not found - install uv package manager"; exit 1; }
	@echo "✅ All required tools found"

# Build Environment Preparation
build: check-tools
	@echo "Preparing production build environment..."
	@$(MAKE) -f make.deploy build-contents
	@$(MAKE) -f make.deploy build-test
	@echo "✅ Build environment ready"

# Intermediate targets for incremental builds
$(ASSETS_MARKER): $(ASSET_FILES)
	@echo "Copying DXT assets..."
	@mkdir -p $(BUILD_DIR)
	@cp -r $(ASSETS_DIR)/* $(BUILD_DIR)/
	@chmod +x $(BUILD_DIR)/check-prereqs.sh
	@echo "Generating manifest.json from template..."
	@python3 scripts/version-utils.py generate-manifest $(BUILD_DIR)/manifest.json.j2 $(BUILD_DIR)/manifest.json --version $(PACKAGE_VERSION)
	@rm $(BUILD_DIR)/manifest.json.j2
	@touch $@

$(APP_MARKER): $(APP_FILES)
	@echo "Copying app source code..."
	@for file in $(APP_FILES); do \
		rel_path=$${file#app/}; \
		mkdir -p "$$(dirname "$(BUILD_DIR)/$$rel_path")"; \
		cp $$file $(BUILD_DIR)/$$rel_path; \
	done
	@touch $@

$(DEPS_MARKER): pyproject.toml
	@echo "Installing Python dependencies..."
	@mkdir -p $(BUILD_PKGS_DIR)
	@uv pip install --target $(BUILD_PKGS_DIR) --no-cache-dir --quiet --no-binary=pydantic-core .
	@touch $@

build-contents: $(ASSETS_MARKER) $(APP_MARKER)
	@echo "✅ Build contents prepared"

build-test: build-contents
	@echo "Testing bootstrap script in build directory..."
	@echo "Verifying bootstrap.py can import dependencies..."
	@cd $(BUILD_DIR) && python -c "import bootstrap; print('Bootstrap module imported successfully')"
	@echo "✅ Bootstrap test passed"

# Package Creation
$(PACKAGE_NAME): build-contents
	@echo "Packing with official DXT CLI..."
	@mkdir -p $(DIST_DIR)
	@npx @anthropic-ai/dxt pack $(BUILD_DIR) $(PACKAGE_NAME)
	@echo "✅ Built $(PACKAGE_NAME)"

package: $(PACKAGE_NAME)
	@echo "✅ Python package created: $(PACKAGE_NAME)"

dxt-package: package
	@echo "✅ DXT package created: $(PACKAGE_NAME)"

# Package Validation
validate-package: check-tools dxt-package
	@echo "Validating DXT package..."
	@echo "Validating with official DXT CLI..."
	@npx @anthropic-ai/dxt info $(PACKAGE_NAME)
	@echo "Validating generated manifest.json..."
	@npx @anthropic-ai/dxt validate $(BUILD_DIR)/manifest.json
	@echo "✅ DXT package validation passed"

# Release Package Creation
$(RELEASE_NAME): validate-package $(ASSETS_DIR)/README.md $(ASSETS_DIR)/check-prereqs.sh
	@echo "Creating release package..."
	@mkdir -p $(DIST_DIR)/release
	@cp $(PACKAGE_NAME) $(DIST_DIR)/release/
	@cp $(ASSETS_DIR)/README.md $(DIST_DIR)/release/
	@cp $(ASSETS_DIR)/check-prereqs.sh $(DIST_DIR)/release/
	@cd $(DIST_DIR)/release && zip -r ../$(DXT_NAME)-$(PACKAGE_VERSION)-release.zip .
	@rm -rf $(DIST_DIR)/release
	@echo "✅ Built $(RELEASE_NAME)"

release-package: $(RELEASE_NAME)
	@echo "✅ Release package $(RELEASE_NAME) ready for distribution"

# Release Tagging Targets
tag:
	@echo "Creating release tag..."
	@./tools/release.sh release

tag-dev:
	@echo "Creating development tag..."
	@./tools/release.sh dev

# Cleanup Targets
deploy-clean:
	@echo "Cleaning build artifacts..."
	@rm -rf $(BUILD_DIR) $(DIST_DIR)
	@echo "✅ Deploy cleanup completed"